/*
* generated by Xtext
*/
package com.visualligence.g.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.visualligence.g.services.VMLGrammarAccess;

public class VMLParser extends AbstractContentAssistParser {
	
	@Inject
	private VMLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.visualligence.g.ui.contentassist.antlr.internal.InternalVMLParser createParser() {
		com.visualligence.g.ui.contentassist.antlr.internal.InternalVMLParser result = new com.visualligence.g.ui.contentassist.antlr.internal.InternalVMLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
					put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
					put(grammarAccess.getLiteralExpressionSignedAccess().getAlternatives(), "rule__LiteralExpressionSigned__Alternatives");
					put(grammarAccess.getLiteralExpressionSignedAccess().getOpAlternatives_0_1_0(), "rule__LiteralExpressionSigned__OpAlternatives_0_1_0");
					put(grammarAccess.getLiteralExpressionTerminalAccess().getAlternatives(), "rule__LiteralExpressionTerminal__Alternatives");
					put(grammarAccess.getRValueAccess().getAlternatives(), "rule__RValue__Alternatives");
					put(grammarAccess.getSingleLiteralDTAccess().getAlternatives(), "rule__SingleLiteralDT__Alternatives");
					put(grammarAccess.getNumberLiteralAccess().getAlternatives(), "rule__NumberLiteral__Alternatives");
					put(grammarAccess.getIntegerAccess().getAlternatives(), "rule__Integer__Alternatives");
					put(grammarAccess.getFloatAccess().getAlternatives(), "rule__Float__Alternatives");
					put(grammarAccess.getSNotationAccess().getAlternatives_0(), "rule__SNotation__Alternatives_0");
					put(grammarAccess.getExpConstantAccess().getAlternatives(), "rule__ExpConstant__Alternatives");
					put(grammarAccess.getSignAccess().getAlternatives(), "rule__Sign__Alternatives");
					put(grammarAccess.getImaginaryAccess().getAlternatives_0(), "rule__Imaginary__Alternatives_0");
					put(grammarAccess.getImaginaryConstantAccess().getAlternatives(), "rule__ImaginaryConstant__Alternatives");
					put(grammarAccess.getBoolLiteralAccess().getAlternatives(), "rule__BoolLiteral__Alternatives");
					put(grammarAccess.getSequenceLiteralAccess().getAlternatives(), "rule__SequenceLiteral__Alternatives");
					put(grammarAccess.getUnitAccess().getAlternatives(), "rule__Unit__Alternatives");
					put(grammarAccess.getTypeRefAccess().getAlternatives(), "rule__TypeRef__Alternatives");
					put(grammarAccess.getPlainTypeRefAccess().getAlternatives(), "rule__PlainTypeRef__Alternatives");
					put(grammarAccess.getCompositeTypeRefAccess().getAlternatives(), "rule__CompositeTypeRef__Alternatives");
					put(grammarAccess.getRStreamValueAccess().getAlternatives(), "rule__RStreamValue__Alternatives");
					put(grammarAccess.getFileAccess().getAlternatives_2(), "rule__File__Alternatives_2");
					put(grammarAccess.getBinOpAccess().getAlternatives(), "rule__BinOp__Alternatives");
					put(grammarAccess.getCompOpAccess().getAlternatives(), "rule__CompOp__Alternatives");
					put(grammarAccess.getAddOpAccess().getAlternatives(), "rule__AddOp__Alternatives");
					put(grammarAccess.getMultiOpAccess().getAlternatives(), "rule__MultiOp__Alternatives");
					put(grammarAccess.getNumberTypeAccess().getAlternatives(), "rule__NumberType__Alternatives");
					put(grammarAccess.getVisualTypeAccess().getAlternatives(), "rule__VisualType__Alternatives");
					put(grammarAccess.getAuxTypeAccess().getAlternatives(), "rule__AuxType__Alternatives");
					put(grammarAccess.getCollectionTypeAccess().getAlternatives(), "rule__CollectionType__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_1(), "rule__Module__Group_1__0");
					put(grammarAccess.getModuleAccess().getGroup_2(), "rule__Module__Group_2__0");
					put(grammarAccess.getModuleAccess().getGroup_3(), "rule__Module__Group_3__0");
					put(grammarAccess.getModuleAccess().getGroup_4(), "rule__Module__Group_4__0");
					put(grammarAccess.getModuleAccess().getGroup_5(), "rule__Module__Group_5__0");
					put(grammarAccess.getModuleAccess().getGroup_6(), "rule__Module__Group_6__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getSwitchAccess().getGroup(), "rule__Switch__Group__0");
					put(grammarAccess.getLiteralExpressionBinAccess().getGroup(), "rule__LiteralExpressionBin__Group__0");
					put(grammarAccess.getLiteralExpressionBinAccess().getGroup_1(), "rule__LiteralExpressionBin__Group_1__0");
					put(grammarAccess.getLiteralExpressionCompAccess().getGroup(), "rule__LiteralExpressionComp__Group__0");
					put(grammarAccess.getLiteralExpressionCompAccess().getGroup_1(), "rule__LiteralExpressionComp__Group_1__0");
					put(grammarAccess.getLiteralExpressionAddAccess().getGroup(), "rule__LiteralExpressionAdd__Group__0");
					put(grammarAccess.getLiteralExpressionAddAccess().getGroup_1(), "rule__LiteralExpressionAdd__Group_1__0");
					put(grammarAccess.getLiteralExpressionMultiAccess().getGroup(), "rule__LiteralExpressionMulti__Group__0");
					put(grammarAccess.getLiteralExpressionMultiAccess().getGroup_1(), "rule__LiteralExpressionMulti__Group_1__0");
					put(grammarAccess.getLiteralExpressionExpAccess().getGroup(), "rule__LiteralExpressionExp__Group__0");
					put(grammarAccess.getLiteralExpressionExpAccess().getGroup_1(), "rule__LiteralExpressionExp__Group_1__0");
					put(grammarAccess.getLiteralExpressionSignedAccess().getGroup_0(), "rule__LiteralExpressionSigned__Group_0__0");
					put(grammarAccess.getLiteralExpressionTerminalAccess().getGroup_0(), "rule__LiteralExpressionTerminal__Group_0__0");
					put(grammarAccess.getFloatAccess().getGroup_0(), "rule__Float__Group_0__0");
					put(grammarAccess.getFloatAccess().getGroup_1(), "rule__Float__Group_1__0");
					put(grammarAccess.getSNotationAccess().getGroup(), "rule__SNotation__Group__0");
					put(grammarAccess.getImaginaryAccess().getGroup(), "rule__Imaginary__Group__0");
					put(grammarAccess.getSequenceLiteralSerieAccess().getGroup(), "rule__SequenceLiteralSerie__Group__0");
					put(grammarAccess.getSequenceLiteralSerieAccess().getGroup_4(), "rule__SequenceLiteralSerie__Group_4__0");
					put(grammarAccess.getSequenceLiteralPlainAccess().getGroup(), "rule__SequenceLiteralPlain__Group__0");
					put(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2(), "rule__SequenceLiteralPlain__Group_2__0");
					put(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2_1(), "rule__SequenceLiteralPlain__Group_2_1__0");
					put(grammarAccess.getTupleLiteralAccess().getGroup(), "rule__TupleLiteral__Group__0");
					put(grammarAccess.getTupleLiteralAccess().getGroup_2(), "rule__TupleLiteral__Group_2__0");
					put(grammarAccess.getTupleLiteralAccess().getGroup_2_1(), "rule__TupleLiteral__Group_2_1__0");
					put(grammarAccess.getTupleItemAccess().getGroup(), "rule__TupleItem__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_2(), "rule__Block__Group_2__0");
					put(grammarAccess.getNoopAccess().getGroup(), "rule__Noop__Group__0");
					put(grammarAccess.getPairAccess().getGroup(), "rule__Pair__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getMultiAccess().getGroup(), "rule__Multi__Group__0");
					put(grammarAccess.getDUnitAccess().getGroup(), "rule__DUnit__Group__0");
					put(grammarAccess.getNUnitAccess().getGroup(), "rule__NUnit__Group__0");
					put(grammarAccess.getBoxAccess().getGroup(), "rule__Box__Group__0");
					put(grammarAccess.getShapeAccess().getGroup(), "rule__Shape__Group__0");
					put(grammarAccess.getMemberAccess().getGroup(), "rule__Member__Group__0");
					put(grammarAccess.getSequenceTypeRefAccess().getGroup(), "rule__SequenceTypeRef__Group__0");
					put(grammarAccess.getTupleTypeRefAccess().getGroup(), "rule__TupleTypeRef__Group__0");
					put(grammarAccess.getTupleTypeRefAccess().getGroup_2(), "rule__TupleTypeRef__Group_2__0");
					put(grammarAccess.getTupleTypeRefAccess().getGroup_2_1(), "rule__TupleTypeRef__Group_2_1__0");
					put(grammarAccess.getTupleTypeRefItemAccess().getGroup(), "rule__TupleTypeRefItem__Group__0");
					put(grammarAccess.getSetTypeRefAccess().getGroup(), "rule__SetTypeRef__Group__0");
					put(grammarAccess.getAutoTypeRefAccess().getGroup(), "rule__AutoTypeRef__Group__0");
					put(grammarAccess.getCollectionRefAccess().getGroup(), "rule__CollectionRef__Group__0");
					put(grammarAccess.getUnitRefAccess().getGroup(), "rule__UnitRef__Group__0");
					put(grammarAccess.getBoxRefAccess().getGroup(), "rule__BoxRef__Group__0");
					put(grammarAccess.getShapeRefAccess().getGroup(), "rule__ShapeRef__Group__0");
					put(grammarAccess.getTypeAliasAccess().getGroup(), "rule__TypeAlias__Group__0");
					put(grammarAccess.getStreamAccess().getGroup(), "rule__Stream__Group__0");
					put(grammarAccess.getInputRefAccess().getGroup(), "rule__InputRef__Group__0");
					put(grammarAccess.getOutputRefAccess().getGroup(), "rule__OutputRef__Group__0");
					put(grammarAccess.getInvokationAccess().getGroup(), "rule__Invokation__Group__0");
					put(grammarAccess.getInvokationParamAccess().getGroup(), "rule__InvokationParam__Group__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getLoopSentenceAccess().getGroup(), "rule__LoopSentence__Group__0");
					put(grammarAccess.getLoopSentenceAccess().getGroup_4(), "rule__LoopSentence__Group_4__0");
					put(grammarAccess.getLoopForAccess().getGroup(), "rule__LoopFor__Group__0");
					put(grammarAccess.getFactoryAccess().getGroup(), "rule__Factory__Group__0");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getCanvasAccess().getGroup(), "rule__Canvas__Group__0");
					put(grammarAccess.getCanvasAccess().getGroup_3(), "rule__Canvas__Group_3__0");
					put(grammarAccess.getModuleAccess().getNameAssignment_1_1(), "rule__Module__NameAssignment_1_1");
					put(grammarAccess.getModuleAccess().getInputtypeAssignment_2_1(), "rule__Module__InputtypeAssignment_2_1");
					put(grammarAccess.getModuleAccess().getOutputtypeAssignment_3_1(), "rule__Module__OutputtypeAssignment_3_1");
					put(grammarAccess.getModuleAccess().getAuthorAssignment_4_1(), "rule__Module__AuthorAssignment_4_1");
					put(grammarAccess.getModuleAccess().getCreationAssignment_5_1(), "rule__Module__CreationAssignment_5_1");
					put(grammarAccess.getModuleAccess().getLinkAssignment_6_1(), "rule__Module__LinkAssignment_6_1");
					put(grammarAccess.getModuleAccess().getImportsAssignment_7(), "rule__Module__ImportsAssignment_7");
					put(grammarAccess.getModuleAccess().getSentencesAssignment_8(), "rule__Module__SentencesAssignment_8");
					put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
					put(grammarAccess.getSwitchAccess().getNameAssignment_1(), "rule__Switch__NameAssignment_1");
					put(grammarAccess.getSwitchAccess().getTestAssignment_2(), "rule__Switch__TestAssignment_2");
					put(grammarAccess.getSwitchAccess().getAAssignment_4(), "rule__Switch__AAssignment_4");
					put(grammarAccess.getSwitchAccess().getBAssignment_6(), "rule__Switch__BAssignment_6");
					put(grammarAccess.getLiteralExpressionBinAccess().getOpAssignment_1_1(), "rule__LiteralExpressionBin__OpAssignment_1_1");
					put(grammarAccess.getLiteralExpressionBinAccess().getRightAssignment_1_2(), "rule__LiteralExpressionBin__RightAssignment_1_2");
					put(grammarAccess.getLiteralExpressionCompAccess().getOpAssignment_1_1(), "rule__LiteralExpressionComp__OpAssignment_1_1");
					put(grammarAccess.getLiteralExpressionCompAccess().getRightAssignment_1_2(), "rule__LiteralExpressionComp__RightAssignment_1_2");
					put(grammarAccess.getLiteralExpressionAddAccess().getOpAssignment_1_1(), "rule__LiteralExpressionAdd__OpAssignment_1_1");
					put(grammarAccess.getLiteralExpressionAddAccess().getRightAssignment_1_2(), "rule__LiteralExpressionAdd__RightAssignment_1_2");
					put(grammarAccess.getLiteralExpressionMultiAccess().getOpAssignment_1_1(), "rule__LiteralExpressionMulti__OpAssignment_1_1");
					put(grammarAccess.getLiteralExpressionMultiAccess().getRightAssignment_1_2(), "rule__LiteralExpressionMulti__RightAssignment_1_2");
					put(grammarAccess.getLiteralExpressionExpAccess().getOpAssignment_1_1(), "rule__LiteralExpressionExp__OpAssignment_1_1");
					put(grammarAccess.getLiteralExpressionExpAccess().getRightAssignment_1_2(), "rule__LiteralExpressionExp__RightAssignment_1_2");
					put(grammarAccess.getLiteralExpressionSignedAccess().getOpAssignment_0_1(), "rule__LiteralExpressionSigned__OpAssignment_0_1");
					put(grammarAccess.getLiteralExpressionSignedAccess().getRightAssignment_0_2(), "rule__LiteralExpressionSigned__RightAssignment_0_2");
					put(grammarAccess.getNodeRefAccess().getNodeAssignment(), "rule__NodeRef__NodeAssignment");
					put(grammarAccess.getMemberRefAccess().getMemberAssignment(), "rule__MemberRef__MemberAssignment");
					put(grammarAccess.getConstantRefAccess().getConstantrefAssignment(), "rule__ConstantRef__ConstantrefAssignment");
					put(grammarAccess.getSingleLiteralAccess().getValueAssignment(), "rule__SingleLiteral__ValueAssignment");
					put(grammarAccess.getSequenceLiteralSerieAccess().getInitAssignment_1(), "rule__SequenceLiteralSerie__InitAssignment_1");
					put(grammarAccess.getSequenceLiteralSerieAccess().getEndAssignment_3(), "rule__SequenceLiteralSerie__EndAssignment_3");
					put(grammarAccess.getSequenceLiteralSerieAccess().getIncAssignment_4_1(), "rule__SequenceLiteralSerie__IncAssignment_4_1");
					put(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_0(), "rule__SequenceLiteralPlain__ItemsAssignment_2_0");
					put(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_1_1(), "rule__SequenceLiteralPlain__ItemsAssignment_2_1_1");
					put(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_0(), "rule__TupleLiteral__ItemsAssignment_2_0");
					put(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_1_1(), "rule__TupleLiteral__ItemsAssignment_2_1_1");
					put(grammarAccess.getTupleItemAccess().getNameAssignment_0(), "rule__TupleItem__NameAssignment_0");
					put(grammarAccess.getTupleItemAccess().getValueAssignment_2(), "rule__TupleItem__ValueAssignment_2");
					put(grammarAccess.getBlockAccess().getNameAssignment_2_1(), "rule__Block__NameAssignment_2_1");
					put(grammarAccess.getBlockAccess().getSentencesAssignment_3(), "rule__Block__SentencesAssignment_3");
					put(grammarAccess.getNoopAccess().getNameAssignment_1(), "rule__Noop__NameAssignment_1");
					put(grammarAccess.getPairAccess().getNameAssignment_0(), "rule__Pair__NameAssignment_0");
					put(grammarAccess.getPairAccess().getValueAssignment_2(), "rule__Pair__ValueAssignment_2");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getTypeAssignment_2(), "rule__Constant__TypeAssignment_2");
					put(grammarAccess.getConstantAccess().getValueAssignment_4(), "rule__Constant__ValueAssignment_4");
					put(grammarAccess.getMultiAccess().getNameAssignment_1(), "rule__Multi__NameAssignment_1");
					put(grammarAccess.getMultiAccess().getOpAssignment_3(), "rule__Multi__OpAssignment_3");
					put(grammarAccess.getMultiAccess().getFactorAssignment_4(), "rule__Multi__FactorAssignment_4");
					put(grammarAccess.getMultiAccess().getParentAssignment_5(), "rule__Multi__ParentAssignment_5");
					put(grammarAccess.getDUnitAccess().getNameAssignment_1(), "rule__DUnit__NameAssignment_1");
					put(grammarAccess.getDUnitAccess().getOpAssignment_3(), "rule__DUnit__OpAssignment_3");
					put(grammarAccess.getDUnitAccess().getFactorAssignment_4(), "rule__DUnit__FactorAssignment_4");
					put(grammarAccess.getDUnitAccess().getMultiAssignment_5(), "rule__DUnit__MultiAssignment_5");
					put(grammarAccess.getDUnitAccess().getParentAssignment_6(), "rule__DUnit__ParentAssignment_6");
					put(grammarAccess.getNUnitAccess().getNameAssignment_1(), "rule__NUnit__NameAssignment_1");
					put(grammarAccess.getNUnitAccess().getNumbertypeAssignment_2(), "rule__NUnit__NumbertypeAssignment_2");
					put(grammarAccess.getBoxAccess().getNameAssignment_1(), "rule__Box__NameAssignment_1");
					put(grammarAccess.getBoxAccess().getMembersAssignment_3(), "rule__Box__MembersAssignment_3");
					put(grammarAccess.getShapeAccess().getNameAssignment_1(), "rule__Shape__NameAssignment_1");
					put(grammarAccess.getMemberAccess().getNameAssignment_0(), "rule__Member__NameAssignment_0");
					put(grammarAccess.getMemberAccess().getTypeAssignment_1(), "rule__Member__TypeAssignment_1");
					put(grammarAccess.getSequenceTypeRefAccess().getTypeAssignment_2(), "rule__SequenceTypeRef__TypeAssignment_2");
					put(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_0(), "rule__TupleTypeRef__ItemsAssignment_2_0");
					put(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_1_1(), "rule__TupleTypeRef__ItemsAssignment_2_1_1");
					put(grammarAccess.getTupleTypeRefItemAccess().getNameAssignment_0(), "rule__TupleTypeRefItem__NameAssignment_0");
					put(grammarAccess.getTupleTypeRefItemAccess().getTypeAssignment_2(), "rule__TupleTypeRefItem__TypeAssignment_2");
					put(grammarAccess.getSetTypeRefAccess().getTypeAssignment_2(), "rule__SetTypeRef__TypeAssignment_2");
					put(grammarAccess.getVoidTypeRefAccess().getNameAssignment(), "rule__VoidTypeRef__NameAssignment");
					put(grammarAccess.getCollectionRefAccess().getCollectionAssignment_0(), "rule__CollectionRef__CollectionAssignment_0");
					put(grammarAccess.getCollectionRefAccess().getTyperefAssignment_2(), "rule__CollectionRef__TyperefAssignment_2");
					put(grammarAccess.getUnitRefAccess().getUnittypeAssignment_1(), "rule__UnitRef__UnittypeAssignment_1");
					put(grammarAccess.getBoxRefAccess().getRefAssignment_1(), "rule__BoxRef__RefAssignment_1");
					put(grammarAccess.getTypeAliasRefAccess().getRefAssignment(), "rule__TypeAliasRef__RefAssignment");
					put(grammarAccess.getAuxTypeRefAccess().getRefAssignment(), "rule__AuxTypeRef__RefAssignment");
					put(grammarAccess.getShapeRefAccess().getRefAssignment_1(), "rule__ShapeRef__RefAssignment_1");
					put(grammarAccess.getNumberTypeRefAccess().getRefAssignment(), "rule__NumberTypeRef__RefAssignment");
					put(grammarAccess.getVisualTypeRefAccess().getRefAssignment(), "rule__VisualTypeRef__RefAssignment");
					put(grammarAccess.getTypeAliasAccess().getNameAssignment_1(), "rule__TypeAlias__NameAssignment_1");
					put(grammarAccess.getTypeAliasAccess().getTypeAssignment_2(), "rule__TypeAlias__TypeAssignment_2");
					put(grammarAccess.getStreamAccess().getNameAssignment_0(), "rule__Stream__NameAssignment_0");
					put(grammarAccess.getStreamAccess().getLeftAssignment_1(), "rule__Stream__LeftAssignment_1");
					put(grammarAccess.getStreamAccess().getRightAssignment_3(), "rule__Stream__RightAssignment_3");
					put(grammarAccess.getInvokationAccess().getModuleAssignment_0(), "rule__Invokation__ModuleAssignment_0");
					put(grammarAccess.getInvokationAccess().getNameAssignment_1(), "rule__Invokation__NameAssignment_1");
					put(grammarAccess.getInvokationAccess().getSentencesAssignment_3(), "rule__Invokation__SentencesAssignment_3");
					put(grammarAccess.getInvokationParamAccess().getNameAssignment_0(), "rule__InvokationParam__NameAssignment_0");
					put(grammarAccess.getInvokationParamAccess().getSourceAssignment_2(), "rule__InvokationParam__SourceAssignment_2");
					put(grammarAccess.getLoopAccess().getItAssignment_1(), "rule__Loop__ItAssignment_1");
					put(grammarAccess.getLoopAccess().getNameAssignment_2(), "rule__Loop__NameAssignment_2");
					put(grammarAccess.getLoopAccess().getSentencesAssignment_4(), "rule__Loop__SentencesAssignment_4");
					put(grammarAccess.getLoopSentenceAccess().getNameAssignment_0(), "rule__LoopSentence__NameAssignment_0");
					put(grammarAccess.getLoopSentenceAccess().getTypeAssignment_1(), "rule__LoopSentence__TypeAssignment_1");
					put(grammarAccess.getLoopSentenceAccess().getOAssignment_3(), "rule__LoopSentence__OAssignment_3");
					put(grammarAccess.getLoopSentenceAccess().getIAssignment_4_1(), "rule__LoopSentence__IAssignment_4_1");
					put(grammarAccess.getFactoryAccess().getNameAssignment_1(), "rule__Factory__NameAssignment_1");
					put(grammarAccess.getFactoryAccess().getTypeAssignment_2(), "rule__Factory__TypeAssignment_2");
					put(grammarAccess.getFileAccess().getNameAssignment_1(), "rule__File__NameAssignment_1");
					put(grammarAccess.getFileAccess().getIsinputAssignment_2_0(), "rule__File__IsinputAssignment_2_0");
					put(grammarAccess.getFileAccess().getPathAssignment_3(), "rule__File__PathAssignment_3");
					put(grammarAccess.getCanvasAccess().getNameAssignment_1(), "rule__Canvas__NameAssignment_1");
					put(grammarAccess.getCanvasAccess().getPropertiesAssignment_3_0(), "rule__Canvas__PropertiesAssignment_3_0");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.visualligence.g.ui.contentassist.antlr.internal.InternalVMLParser typedParser = (com.visualligence.g.ui.contentassist.antlr.internal.InternalVMLParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public VMLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(VMLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
