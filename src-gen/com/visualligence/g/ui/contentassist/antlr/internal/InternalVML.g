/*
* generated by Xtext
*/
grammar InternalVML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.visualligence.g.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.visualligence.g.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.visualligence.g.services.VMLGrammarAccess;

}

@parser::members {
 
 	private VMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(VMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeDecl
entryRuleTypeDecl 
:
{ before(grammarAccess.getTypeDeclRule()); }
	 ruleTypeDecl
{ after(grammarAccess.getTypeDeclRule()); } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeDeclAccess().getGroup()); }
(rule__TypeDecl__Group__0)
{ after(grammarAccess.getTypeDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHash
entryRuleHash 
:
{ before(grammarAccess.getHashRule()); }
	 ruleHash
{ after(grammarAccess.getHashRule()); } 
	 EOF 
;

// Rule Hash
ruleHash
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHashAccess().getGroup()); }
(rule__Hash__Group__0)
{ after(grammarAccess.getHashAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHashItem
entryRuleHashItem 
:
{ before(grammarAccess.getHashItemRule()); }
	 ruleHashItem
{ after(grammarAccess.getHashItemRule()); } 
	 EOF 
;

// Rule HashItem
ruleHashItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHashItemAccess().getGroup()); }
(rule__HashItem__Group__0)
{ after(grammarAccess.getHashItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInput
entryRuleInput 
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputAccess().getGroup()); }
(rule__Input__Group__0)
{ after(grammarAccess.getInputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutput
entryRuleOutput 
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputAccess().getGroup()); }
(rule__Output__Group__0)
{ after(grammarAccess.getOutputAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleAction_0()); }
(

)
{ after(grammarAccess.getModuleAccess().getModuleAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_1()); }
(rule__Module__Group_1__0)*
{ after(grammarAccess.getModuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_2()); }
(rule__Module__Group_2__0)*
{ after(grammarAccess.getModuleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_3()); }
(rule__Module__Group_3__0)*
{ after(grammarAccess.getModuleAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Module__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_1__0__Impl
	rule__Module__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getTypesKeyword_1_0()); }

	'types' 

{ after(grammarAccess.getModuleAccess().getTypesKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getTypesAssignment_1_1()); }
(rule__Module__TypesAssignment_1_1)
{ after(grammarAccess.getModuleAccess().getTypesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_2__0__Impl
	rule__Module__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputKeyword_2_0()); }

	'input' 

{ after(grammarAccess.getModuleAccess().getInputKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputAssignment_2_1()); }
(rule__Module__InputAssignment_2_1)
{ after(grammarAccess.getModuleAccess().getInputAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_3__0__Impl
	rule__Module__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputKeyword_3_0()); }

	'output' 

{ after(grammarAccess.getModuleAccess().getOutputKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputAssignment_3_1()); }
(rule__Module__OutputAssignment_3_1)
{ after(grammarAccess.getModuleAccess().getOutputAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__0__Impl
	rule__TypeDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeDeclAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__1__Impl
	rule__TypeDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getHashParserRuleCall_1()); }
	ruleHash
{ after(grammarAccess.getTypeDeclAccess().getHashParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameAssignment_2()); }
(rule__TypeDecl__NameAssignment_2)
{ after(grammarAccess.getTypeDeclAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Hash__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group__0__Impl
	rule__Hash__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getHashAction_0()); }
(

)
{ after(grammarAccess.getHashAccess().getHashAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hash__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group__1__Impl
	rule__Hash__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getHashAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hash__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group__2__Impl
	rule__Hash__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getGroup_2()); }
(rule__Hash__Group_2__0)?
{ after(grammarAccess.getHashAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hash__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getHashAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Hash__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group_2__0__Impl
	rule__Hash__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getItemsAssignment_2_0()); }
(rule__Hash__ItemsAssignment_2_0)
{ after(grammarAccess.getHashAccess().getItemsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hash__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getGroup_2_1()); }
(rule__Hash__Group_2_1__0)*
{ after(grammarAccess.getHashAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Hash__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group_2_1__0__Impl
	rule__Hash__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getHashAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hash__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hash__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getItemsAssignment_2_1_1()); }
(rule__Hash__ItemsAssignment_2_1_1)
{ after(grammarAccess.getHashAccess().getItemsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__HashItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashItem__Group__0__Impl
	rule__HashItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getHashItemAction_0()); }
(

)
{ after(grammarAccess.getHashItemAccess().getHashItemAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashItem__Group__1__Impl
	rule__HashItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getNameAssignment_1()); }
(rule__HashItem__NameAssignment_1)
{ after(grammarAccess.getHashItemAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashItem__Group__2__Impl
	rule__HashItem__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getHashItemAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HashItem__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HashItem__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getTypeAssignment_3()); }
(rule__HashItem__TypeAssignment_3)
{ after(grammarAccess.getHashItemAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Input__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getNameAssignment_0()); }
(rule__Input__NameAssignment_0)
{ after(grammarAccess.getInputAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getInputAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Input__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTypeAssignment_2()); }
(rule__Input__TypeAssignment_2)
{ after(grammarAccess.getInputAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Output__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getNameAssignment_0()); }
(rule__Output__NameAssignment_0)
{ after(grammarAccess.getOutputAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getOutputAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Output__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getTypeAssignment_2()); }
(rule__Output__TypeAssignment_2)
{ after(grammarAccess.getOutputAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Module__TypesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getTypesTypeDeclParserRuleCall_1_1_0()); }
	ruleTypeDecl{ after(grammarAccess.getModuleAccess().getTypesTypeDeclParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__InputAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputInputParserRuleCall_2_1_0()); }
	ruleInput{ after(grammarAccess.getModuleAccess().getInputInputParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__OutputAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputOutputParserRuleCall_3_1_0()); }
	ruleOutput{ after(grammarAccess.getModuleAccess().getOutputOutputParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDecl__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeDeclAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getTypeDeclAccess().getNameSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__ItemsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_0_0()); }
	ruleHashItem{ after(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hash__ItemsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_1_1_0()); }
	ruleHashItem{ after(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getHashItemAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HashItem__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHashItemAccess().getTypeTypeDeclCrossReference_3_0()); }
(
{ before(grammarAccess.getHashItemAccess().getTypeTypeDeclIDTerminalRuleCall_3_0_1()); }
	RULE_ID{ after(grammarAccess.getHashItemAccess().getTypeTypeDeclIDTerminalRuleCall_3_0_1()); }
)
{ after(grammarAccess.getHashItemAccess().getTypeTypeDeclCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getInputAccess().getNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Input__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputAccess().getTypeTypeDeclCrossReference_2_0()); }
(
{ before(grammarAccess.getInputAccess().getTypeTypeDeclIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getInputAccess().getTypeTypeDeclIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getInputAccess().getTypeTypeDeclCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getNameSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getOutputAccess().getNameSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Output__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputAccess().getTypeTypeDeclCrossReference_2_0()); }
(
{ before(grammarAccess.getOutputAccess().getTypeTypeDeclIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getOutputAccess().getTypeTypeDeclIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getOutputAccess().getTypeTypeDeclCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


