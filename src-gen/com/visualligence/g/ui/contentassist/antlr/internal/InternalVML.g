/*
* generated by Xtext
*/
grammar InternalVML;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.visualligence.g.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.visualligence.g.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.visualligence.g.services.VMLGrammarAccess;

}

@parser::members {
 
 	private VMLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(VMLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSentence
entryRuleSentence 
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSentenceAccess().getAlternatives()); }
(rule__Sentence__Alternatives)
{ after(grammarAccess.getSentenceAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNode
entryRuleNode 
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNodeAccess().getAlternatives()); }
(rule__Node__Alternatives)
{ after(grammarAccess.getNodeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitch
entryRuleSwitch 
:
{ before(grammarAccess.getSwitchRule()); }
	 ruleSwitch
{ after(grammarAccess.getSwitchRule()); } 
	 EOF 
;

// Rule Switch
ruleSwitch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchAccess().getGroup()); }
(rule__Switch__Group__0)
{ after(grammarAccess.getSwitchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression 
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionBinParserRuleCall()); }
	ruleLiteralExpressionBin
{ after(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionBinParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionBin
entryRuleLiteralExpressionBin 
:
{ before(grammarAccess.getLiteralExpressionBinRule()); }
	 ruleLiteralExpressionBin
{ after(grammarAccess.getLiteralExpressionBinRule()); } 
	 EOF 
;

// Rule LiteralExpressionBin
ruleLiteralExpressionBin
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getGroup()); }
(rule__LiteralExpressionBin__Group__0)
{ after(grammarAccess.getLiteralExpressionBinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionComp
entryRuleLiteralExpressionComp 
:
{ before(grammarAccess.getLiteralExpressionCompRule()); }
	 ruleLiteralExpressionComp
{ after(grammarAccess.getLiteralExpressionCompRule()); } 
	 EOF 
;

// Rule LiteralExpressionComp
ruleLiteralExpressionComp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getGroup()); }
(rule__LiteralExpressionComp__Group__0)
{ after(grammarAccess.getLiteralExpressionCompAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionAdd
entryRuleLiteralExpressionAdd 
:
{ before(grammarAccess.getLiteralExpressionAddRule()); }
	 ruleLiteralExpressionAdd
{ after(grammarAccess.getLiteralExpressionAddRule()); } 
	 EOF 
;

// Rule LiteralExpressionAdd
ruleLiteralExpressionAdd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getGroup()); }
(rule__LiteralExpressionAdd__Group__0)
{ after(grammarAccess.getLiteralExpressionAddAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionMulti
entryRuleLiteralExpressionMulti 
:
{ before(grammarAccess.getLiteralExpressionMultiRule()); }
	 ruleLiteralExpressionMulti
{ after(grammarAccess.getLiteralExpressionMultiRule()); } 
	 EOF 
;

// Rule LiteralExpressionMulti
ruleLiteralExpressionMulti
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getGroup()); }
(rule__LiteralExpressionMulti__Group__0)
{ after(grammarAccess.getLiteralExpressionMultiAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionExp
entryRuleLiteralExpressionExp 
:
{ before(grammarAccess.getLiteralExpressionExpRule()); }
	 ruleLiteralExpressionExp
{ after(grammarAccess.getLiteralExpressionExpRule()); } 
	 EOF 
;

// Rule LiteralExpressionExp
ruleLiteralExpressionExp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getGroup()); }
(rule__LiteralExpressionExp__Group__0)
{ after(grammarAccess.getLiteralExpressionExpAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionSigned
entryRuleLiteralExpressionSigned 
:
{ before(grammarAccess.getLiteralExpressionSignedRule()); }
	 ruleLiteralExpressionSigned
{ after(grammarAccess.getLiteralExpressionSignedRule()); } 
	 EOF 
;

// Rule LiteralExpressionSigned
ruleLiteralExpressionSigned
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getAlternatives()); }
(rule__LiteralExpressionSigned__Alternatives)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralExpressionTerminal
entryRuleLiteralExpressionTerminal 
:
{ before(grammarAccess.getLiteralExpressionTerminalRule()); }
	 ruleLiteralExpressionTerminal
{ after(grammarAccess.getLiteralExpressionTerminalRule()); } 
	 EOF 
;

// Rule LiteralExpressionTerminal
ruleLiteralExpressionTerminal
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getAlternatives()); }
(rule__LiteralExpressionTerminal__Alternatives)
{ after(grammarAccess.getLiteralExpressionTerminalAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRValue
entryRuleRValue 
:
{ before(grammarAccess.getRValueRule()); }
	 ruleRValue
{ after(grammarAccess.getRValueRule()); } 
	 EOF 
;

// Rule RValue
ruleRValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRValueAccess().getAlternatives()); }
(rule__RValue__Alternatives)
{ after(grammarAccess.getRValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleConstantRef
entryRuleConstantRef 
:
{ before(grammarAccess.getConstantRefRule()); }
	 ruleConstantRef
{ after(grammarAccess.getConstantRefRule()); } 
	 EOF 
;

// Rule ConstantRef
ruleConstantRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantRefAccess().getConstantrefAssignment()); }
(rule__ConstantRef__ConstantrefAssignment)
{ after(grammarAccess.getConstantRefAccess().getConstantrefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleLiteral
entryRuleSingleLiteral 
:
{ before(grammarAccess.getSingleLiteralRule()); }
	 ruleSingleLiteral
{ after(grammarAccess.getSingleLiteralRule()); } 
	 EOF 
;

// Rule SingleLiteral
ruleSingleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleLiteralAccess().getValueAssignment()); }
(rule__SingleLiteral__ValueAssignment)
{ after(grammarAccess.getSingleLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleLiteralDT
entryRuleSingleLiteralDT 
:
{ before(grammarAccess.getSingleLiteralDTRule()); }
	 ruleSingleLiteralDT
{ after(grammarAccess.getSingleLiteralDTRule()); } 
	 EOF 
;

// Rule SingleLiteralDT
ruleSingleLiteralDT
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleLiteralDTAccess().getAlternatives()); }
(rule__SingleLiteralDT__Alternatives)
{ after(grammarAccess.getSingleLiteralDTAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
	RULE_STRING
{ after(grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral 
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
(rule__NumberLiteral__Alternatives)
{ after(grammarAccess.getNumberLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInteger
entryRuleInteger 
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerAccess().getAlternatives()); }
(rule__Integer__Alternatives)
{ after(grammarAccess.getIntegerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloat
entryRuleFloat 
:
{ before(grammarAccess.getFloatRule()); }
	 ruleFloat
{ after(grammarAccess.getFloatRule()); } 
	 EOF 
;

// Rule Float
ruleFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatAccess().getAlternatives()); }
(rule__Float__Alternatives)
{ after(grammarAccess.getFloatAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSNotation
entryRuleSNotation 
:
{ before(grammarAccess.getSNotationRule()); }
	 ruleSNotation
{ after(grammarAccess.getSNotationRule()); } 
	 EOF 
;

// Rule SNotation
ruleSNotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSNotationAccess().getGroup()); }
(rule__SNotation__Group__0)
{ after(grammarAccess.getSNotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpConstant
entryRuleExpConstant 
:
{ before(grammarAccess.getExpConstantRule()); }
	 ruleExpConstant
{ after(grammarAccess.getExpConstantRule()); } 
	 EOF 
;

// Rule ExpConstant
ruleExpConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpConstantAccess().getAlternatives()); }
(rule__ExpConstant__Alternatives)
{ after(grammarAccess.getExpConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSign
entryRuleSign 
:
{ before(grammarAccess.getSignRule()); }
	 ruleSign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignAccess().getAlternatives()); }
(rule__Sign__Alternatives)
{ after(grammarAccess.getSignAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImaginary
entryRuleImaginary 
:
{ before(grammarAccess.getImaginaryRule()); }
	 ruleImaginary
{ after(grammarAccess.getImaginaryRule()); } 
	 EOF 
;

// Rule Imaginary
ruleImaginary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImaginaryAccess().getGroup()); }
(rule__Imaginary__Group__0)
{ after(grammarAccess.getImaginaryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImaginaryConstant
entryRuleImaginaryConstant 
:
{ before(grammarAccess.getImaginaryConstantRule()); }
	 ruleImaginaryConstant
{ after(grammarAccess.getImaginaryConstantRule()); } 
	 EOF 
;

// Rule ImaginaryConstant
ruleImaginaryConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImaginaryConstantAccess().getAlternatives()); }
(rule__ImaginaryConstant__Alternatives)
{ after(grammarAccess.getImaginaryConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral 
:
{ before(grammarAccess.getBoolLiteralRule()); }
	 ruleBoolLiteral
{ after(grammarAccess.getBoolLiteralRule()); } 
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolLiteralAccess().getAlternatives()); }
(rule__BoolLiteral__Alternatives)
{ after(grammarAccess.getBoolLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceLiteral
entryRuleSequenceLiteral 
:
{ before(grammarAccess.getSequenceLiteralRule()); }
	 ruleSequenceLiteral
{ after(grammarAccess.getSequenceLiteralRule()); } 
	 EOF 
;

// Rule SequenceLiteral
ruleSequenceLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceLiteralAccess().getAlternatives()); }
(rule__SequenceLiteral__Alternatives)
{ after(grammarAccess.getSequenceLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceLiteralSerie
entryRuleSequenceLiteralSerie 
:
{ before(grammarAccess.getSequenceLiteralSerieRule()); }
	 ruleSequenceLiteralSerie
{ after(grammarAccess.getSequenceLiteralSerieRule()); } 
	 EOF 
;

// Rule SequenceLiteralSerie
ruleSequenceLiteralSerie
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getGroup()); }
(rule__SequenceLiteralSerie__Group__0)
{ after(grammarAccess.getSequenceLiteralSerieAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceLiteralPlain
entryRuleSequenceLiteralPlain 
:
{ before(grammarAccess.getSequenceLiteralPlainRule()); }
	 ruleSequenceLiteralPlain
{ after(grammarAccess.getSequenceLiteralPlainRule()); } 
	 EOF 
;

// Rule SequenceLiteralPlain
ruleSequenceLiteralPlain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getGroup()); }
(rule__SequenceLiteralPlain__Group__0)
{ after(grammarAccess.getSequenceLiteralPlainAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleLiteral
entryRuleTupleLiteral 
:
{ before(grammarAccess.getTupleLiteralRule()); }
	 ruleTupleLiteral
{ after(grammarAccess.getTupleLiteralRule()); } 
	 EOF 
;

// Rule TupleLiteral
ruleTupleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleLiteralAccess().getGroup()); }
(rule__TupleLiteral__Group__0)
{ after(grammarAccess.getTupleLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleItem
entryRuleTupleItem 
:
{ before(grammarAccess.getTupleItemRule()); }
	 ruleTupleItem
{ after(grammarAccess.getTupleItemRule()); } 
	 EOF 
;

// Rule TupleItem
ruleTupleItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleItemAccess().getGroup()); }
(rule__TupleItem__Group__0)
{ after(grammarAccess.getTupleItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoop
entryRuleNoop 
:
{ before(grammarAccess.getNoopRule()); }
	 ruleNoop
{ after(grammarAccess.getNoopRule()); } 
	 EOF 
;

// Rule Noop
ruleNoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoopAccess().getGroup()); }
(rule__Noop__Group__0)
{ after(grammarAccess.getNoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePair
entryRulePair 
:
{ before(grammarAccess.getPairRule()); }
	 rulePair
{ after(grammarAccess.getPairRule()); } 
	 EOF 
;

// Rule Pair
rulePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPairAccess().getGroup()); }
(rule__Pair__Group__0)
{ after(grammarAccess.getPairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getGroup()); }
(rule__Constant__Group__0)
{ after(grammarAccess.getConstantAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulti
entryRuleMulti 
:
{ before(grammarAccess.getMultiRule()); }
	 ruleMulti
{ after(grammarAccess.getMultiRule()); } 
	 EOF 
;

// Rule Multi
ruleMulti
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiAccess().getGroup()); }
(rule__Multi__Group__0)
{ after(grammarAccess.getMultiAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnit
entryRuleUnit 
:
{ before(grammarAccess.getUnitRule()); }
	 ruleUnit
{ after(grammarAccess.getUnitRule()); } 
	 EOF 
;

// Rule Unit
ruleUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitAccess().getAlternatives()); }
(rule__Unit__Alternatives)
{ after(grammarAccess.getUnitAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDUnit
entryRuleDUnit 
:
{ before(grammarAccess.getDUnitRule()); }
	 ruleDUnit
{ after(grammarAccess.getDUnitRule()); } 
	 EOF 
;

// Rule DUnit
ruleDUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDUnitAccess().getGroup()); }
(rule__DUnit__Group__0)
{ after(grammarAccess.getDUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNUnit
entryRuleNUnit 
:
{ before(grammarAccess.getNUnitRule()); }
	 ruleNUnit
{ after(grammarAccess.getNUnitRule()); } 
	 EOF 
;

// Rule NUnit
ruleNUnit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNUnitAccess().getGroup()); }
(rule__NUnit__Group__0)
{ after(grammarAccess.getNUnitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBox
entryRuleBox 
:
{ before(grammarAccess.getBoxRule()); }
	 ruleBox
{ after(grammarAccess.getBoxRule()); } 
	 EOF 
;

// Rule Box
ruleBox
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoxAccess().getGroup()); }
(rule__Box__Group__0)
{ after(grammarAccess.getBoxAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShape
entryRuleShape 
:
{ before(grammarAccess.getShapeRule()); }
	 ruleShape
{ after(grammarAccess.getShapeRule()); } 
	 EOF 
;

// Rule Shape
ruleShape
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShapeAccess().getGroup()); }
(rule__Shape__Group__0)
{ after(grammarAccess.getShapeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMember
entryRuleMember 
:
{ before(grammarAccess.getMemberRule()); }
	 ruleMember
{ after(grammarAccess.getMemberRule()); } 
	 EOF 
;

// Rule Member
ruleMember
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberAccess().getGroup()); }
(rule__Member__Group__0)
{ after(grammarAccess.getMemberAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeRef
entryRuleTypeRef 
:
{ before(grammarAccess.getTypeRefRule()); }
	 ruleTypeRef
{ after(grammarAccess.getTypeRefRule()); } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeRefAccess().getAlternatives()); }
(rule__TypeRef__Alternatives)
{ after(grammarAccess.getTypeRefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlainTypeRef
entryRulePlainTypeRef 
:
{ before(grammarAccess.getPlainTypeRefRule()); }
	 rulePlainTypeRef
{ after(grammarAccess.getPlainTypeRefRule()); } 
	 EOF 
;

// Rule PlainTypeRef
rulePlainTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlainTypeRefAccess().getAlternatives()); }
(rule__PlainTypeRef__Alternatives)
{ after(grammarAccess.getPlainTypeRefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompositeTypeRef
entryRuleCompositeTypeRef 
:
{ before(grammarAccess.getCompositeTypeRefRule()); }
	 ruleCompositeTypeRef
{ after(grammarAccess.getCompositeTypeRefRule()); } 
	 EOF 
;

// Rule CompositeTypeRef
ruleCompositeTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompositeTypeRefAccess().getAlternatives()); }
(rule__CompositeTypeRef__Alternatives)
{ after(grammarAccess.getCompositeTypeRefAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceTypeRef
entryRuleSequenceTypeRef 
:
{ before(grammarAccess.getSequenceTypeRefRule()); }
	 ruleSequenceTypeRef
{ after(grammarAccess.getSequenceTypeRefRule()); } 
	 EOF 
;

// Rule SequenceTypeRef
ruleSequenceTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getGroup()); }
(rule__SequenceTypeRef__Group__0)
{ after(grammarAccess.getSequenceTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleTypeRef
entryRuleTupleTypeRef 
:
{ before(grammarAccess.getTupleTypeRefRule()); }
	 ruleTupleTypeRef
{ after(grammarAccess.getTupleTypeRefRule()); } 
	 EOF 
;

// Rule TupleTypeRef
ruleTupleTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleTypeRefAccess().getGroup()); }
(rule__TupleTypeRef__Group__0)
{ after(grammarAccess.getTupleTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTupleTypeRefItem
entryRuleTupleTypeRefItem 
:
{ before(grammarAccess.getTupleTypeRefItemRule()); }
	 ruleTupleTypeRefItem
{ after(grammarAccess.getTupleTypeRefItemRule()); } 
	 EOF 
;

// Rule TupleTypeRefItem
ruleTupleTypeRefItem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getGroup()); }
(rule__TupleTypeRefItem__Group__0)
{ after(grammarAccess.getTupleTypeRefItemAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSetTypeRef
entryRuleSetTypeRef 
:
{ before(grammarAccess.getSetTypeRefRule()); }
	 ruleSetTypeRef
{ after(grammarAccess.getSetTypeRefRule()); } 
	 EOF 
;

// Rule SetTypeRef
ruleSetTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetTypeRefAccess().getGroup()); }
(rule__SetTypeRef__Group__0)
{ after(grammarAccess.getSetTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVoidTypeRef
entryRuleVoidTypeRef 
:
{ before(grammarAccess.getVoidTypeRefRule()); }
	 ruleVoidTypeRef
{ after(grammarAccess.getVoidTypeRefRule()); } 
	 EOF 
;

// Rule VoidTypeRef
ruleVoidTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoidTypeRefAccess().getNameAssignment()); }
(rule__VoidTypeRef__NameAssignment)
{ after(grammarAccess.getVoidTypeRefAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAutoTypeRef
entryRuleAutoTypeRef 
:
{ before(grammarAccess.getAutoTypeRefRule()); }
	 ruleAutoTypeRef
{ after(grammarAccess.getAutoTypeRefRule()); } 
	 EOF 
;

// Rule AutoTypeRef
ruleAutoTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAutoTypeRefAccess().getGroup()); }
(rule__AutoTypeRef__Group__0)
{ after(grammarAccess.getAutoTypeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCollectionRef
entryRuleCollectionRef 
:
{ before(grammarAccess.getCollectionRefRule()); }
	 ruleCollectionRef
{ after(grammarAccess.getCollectionRefRule()); } 
	 EOF 
;

// Rule CollectionRef
ruleCollectionRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCollectionRefAccess().getGroup()); }
(rule__CollectionRef__Group__0)
{ after(grammarAccess.getCollectionRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnitRef
entryRuleUnitRef 
:
{ before(grammarAccess.getUnitRefRule()); }
	 ruleUnitRef
{ after(grammarAccess.getUnitRefRule()); } 
	 EOF 
;

// Rule UnitRef
ruleUnitRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnitRefAccess().getGroup()); }
(rule__UnitRef__Group__0)
{ after(grammarAccess.getUnitRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoxRef
entryRuleBoxRef 
:
{ before(grammarAccess.getBoxRefRule()); }
	 ruleBoxRef
{ after(grammarAccess.getBoxRefRule()); } 
	 EOF 
;

// Rule BoxRef
ruleBoxRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoxRefAccess().getGroup()); }
(rule__BoxRef__Group__0)
{ after(grammarAccess.getBoxRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeAliasRef
entryRuleTypeAliasRef 
:
{ before(grammarAccess.getTypeAliasRefRule()); }
	 ruleTypeAliasRef
{ after(grammarAccess.getTypeAliasRefRule()); } 
	 EOF 
;

// Rule TypeAliasRef
ruleTypeAliasRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAliasRefAccess().getRefAssignment()); }
(rule__TypeAliasRef__RefAssignment)
{ after(grammarAccess.getTypeAliasRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAuxTypeRef
entryRuleAuxTypeRef 
:
{ before(grammarAccess.getAuxTypeRefRule()); }
	 ruleAuxTypeRef
{ after(grammarAccess.getAuxTypeRefRule()); } 
	 EOF 
;

// Rule AuxTypeRef
ruleAuxTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAuxTypeRefAccess().getRefAssignment()); }
(rule__AuxTypeRef__RefAssignment)
{ after(grammarAccess.getAuxTypeRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleShapeRef
entryRuleShapeRef 
:
{ before(grammarAccess.getShapeRefRule()); }
	 ruleShapeRef
{ after(grammarAccess.getShapeRefRule()); } 
	 EOF 
;

// Rule ShapeRef
ruleShapeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getShapeRefAccess().getGroup()); }
(rule__ShapeRef__Group__0)
{ after(grammarAccess.getShapeRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberTypeRef
entryRuleNumberTypeRef 
:
{ before(grammarAccess.getNumberTypeRefRule()); }
	 ruleNumberTypeRef
{ after(grammarAccess.getNumberTypeRefRule()); } 
	 EOF 
;

// Rule NumberTypeRef
ruleNumberTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberTypeRefAccess().getRefAssignment()); }
(rule__NumberTypeRef__RefAssignment)
{ after(grammarAccess.getNumberTypeRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVisualTypeRef
entryRuleVisualTypeRef 
:
{ before(grammarAccess.getVisualTypeRefRule()); }
	 ruleVisualTypeRef
{ after(grammarAccess.getVisualTypeRefRule()); } 
	 EOF 
;

// Rule VisualTypeRef
ruleVisualTypeRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVisualTypeRefAccess().getRefAssignment()); }
(rule__VisualTypeRef__RefAssignment)
{ after(grammarAccess.getVisualTypeRefAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeAlias
entryRuleTypeAlias 
:
{ before(grammarAccess.getTypeAliasRule()); }
	 ruleTypeAlias
{ after(grammarAccess.getTypeAliasRule()); } 
	 EOF 
;

// Rule TypeAlias
ruleTypeAlias
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAliasAccess().getGroup()); }
(rule__TypeAlias__Group__0)
{ after(grammarAccess.getTypeAliasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStream
entryRuleStream 
:
{ before(grammarAccess.getStreamRule()); }
	 ruleStream
{ after(grammarAccess.getStreamRule()); } 
	 EOF 
;

// Rule Stream
ruleStream
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStreamAccess().getGroup()); }
(rule__Stream__Group__0)
{ after(grammarAccess.getStreamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLStreamValue
entryRuleLStreamValue 
:
{ before(grammarAccess.getLStreamValueRule()); }
	 ruleLStreamValue
{ after(grammarAccess.getLStreamValueRule()); } 
	 EOF 
;

// Rule LStreamValue
ruleLStreamValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLStreamValueAccess().getOutputRefParserRuleCall()); }
	ruleOutputRef
{ after(grammarAccess.getLStreamValueAccess().getOutputRefParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRStreamValue
entryRuleRStreamValue 
:
{ before(grammarAccess.getRStreamValueRule()); }
	 ruleRStreamValue
{ after(grammarAccess.getRStreamValueRule()); } 
	 EOF 
;

// Rule RStreamValue
ruleRStreamValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRStreamValueAccess().getAlternatives()); }
(rule__RStreamValue__Alternatives)
{ after(grammarAccess.getRStreamValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputRef
entryRuleInputRef 
:
{ before(grammarAccess.getInputRefRule()); }
	 ruleInputRef
{ after(grammarAccess.getInputRefRule()); } 
	 EOF 
;

// Rule InputRef
ruleInputRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputRefAccess().getGroup()); }
(rule__InputRef__Group__0)
{ after(grammarAccess.getInputRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputRef
entryRuleOutputRef 
:
{ before(grammarAccess.getOutputRefRule()); }
	 ruleOutputRef
{ after(grammarAccess.getOutputRefRule()); } 
	 EOF 
;

// Rule OutputRef
ruleOutputRef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputRefAccess().getGroup()); }
(rule__OutputRef__Group__0)
{ after(grammarAccess.getOutputRefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInvokation
entryRuleInvokation 
:
{ before(grammarAccess.getInvokationRule()); }
	 ruleInvokation
{ after(grammarAccess.getInvokationRule()); } 
	 EOF 
;

// Rule Invokation
ruleInvokation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvokationAccess().getGroup()); }
(rule__Invokation__Group__0)
{ after(grammarAccess.getInvokationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInvokationParam
entryRuleInvokationParam 
:
{ before(grammarAccess.getInvokationParamRule()); }
	 ruleInvokationParam
{ after(grammarAccess.getInvokationParamRule()); } 
	 EOF 
;

// Rule InvokationParam
ruleInvokationParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvokationParamAccess().getGroup()); }
(rule__InvokationParam__Group__0)
{ after(grammarAccess.getInvokationParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoop
entryRuleLoop 
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopAccess().getGroup()); }
(rule__Loop__Group__0)
{ after(grammarAccess.getLoopAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopSentence
entryRuleLoopSentence 
:
{ before(grammarAccess.getLoopSentenceRule()); }
	 ruleLoopSentence
{ after(grammarAccess.getLoopSentenceRule()); } 
	 EOF 
;

// Rule LoopSentence
ruleLoopSentence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopSentenceAccess().getGroup()); }
(rule__LoopSentence__Group__0)
{ after(grammarAccess.getLoopSentenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLoopFor
entryRuleLoopFor 
:
{ before(grammarAccess.getLoopForRule()); }
	 ruleLoopFor
{ after(grammarAccess.getLoopForRule()); } 
	 EOF 
;

// Rule LoopFor
ruleLoopFor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLoopForAccess().getGroup()); }
(rule__LoopFor__Group__0)
{ after(grammarAccess.getLoopForAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFactory
entryRuleFactory 
:
{ before(grammarAccess.getFactoryRule()); }
	 ruleFactory
{ after(grammarAccess.getFactoryRule()); } 
	 EOF 
;

// Rule Factory
ruleFactory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFactoryAccess().getGroup()); }
(rule__Factory__Group__0)
{ after(grammarAccess.getFactoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFile
entryRuleFile 
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFileAccess().getGroup()); }
(rule__File__Group__0)
{ after(grammarAccess.getFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCanvas
entryRuleCanvas 
:
{ before(grammarAccess.getCanvasRule()); }
	 ruleCanvas
{ after(grammarAccess.getCanvasRule()); } 
	 EOF 
;

// Rule Canvas
ruleCanvas
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCanvasAccess().getGroup()); }
(rule__Canvas__Group__0)
{ after(grammarAccess.getCanvasAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BinOp
ruleBinOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinOpAccess().getAlternatives()); }
(rule__BinOp__Alternatives)
{ after(grammarAccess.getBinOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NegationOp
ruleNegationOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationOpAccess().getNegEnumLiteralDeclaration()); }
(	'!' 
)
{ after(grammarAccess.getNegationOpAccess().getNegEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CompOp
ruleCompOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompOpAccess().getAlternatives()); }
(rule__CompOp__Alternatives)
{ after(grammarAccess.getCompOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AddOp
ruleAddOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOpAccess().getAlternatives()); }
(rule__AddOp__Alternatives)
{ after(grammarAccess.getAddOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule MultiOp
ruleMultiOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiOpAccess().getAlternatives()); }
(rule__MultiOp__Alternatives)
{ after(grammarAccess.getMultiOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule ExpOp
ruleExpOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpOpAccess().getExpEnumLiteralDeclaration()); }
(	'**' 
)
{ after(grammarAccess.getExpOpAccess().getExpEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NumberType
ruleNumberType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTypeAccess().getAlternatives()); }
(rule__NumberType__Alternatives)
{ after(grammarAccess.getNumberTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule VisualType
ruleVisualType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualTypeAccess().getAlternatives()); }
(rule__VisualType__Alternatives)
{ after(grammarAccess.getVisualTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule AuxType
ruleAuxType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxTypeAccess().getAlternatives()); }
(rule__AuxType__Alternatives)
{ after(grammarAccess.getAuxTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule CollectionType
ruleCollectionType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getAlternatives()); }
(rule__CollectionType__Alternatives)
{ after(grammarAccess.getCollectionTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Sentence__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSentenceAccess().getMultiParserRuleCall_0()); }
	ruleMulti
{ after(grammarAccess.getSentenceAccess().getMultiParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getUnitParserRuleCall_1()); }
	ruleUnit
{ after(grammarAccess.getSentenceAccess().getUnitParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getBoxParserRuleCall_2()); }
	ruleBox
{ after(grammarAccess.getSentenceAccess().getBoxParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getConstantParserRuleCall_3()); }
	ruleConstant
{ after(grammarAccess.getSentenceAccess().getConstantParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getShapeParserRuleCall_4()); }
	ruleShape
{ after(grammarAccess.getSentenceAccess().getShapeParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getTypeAliasParserRuleCall_5()); }
	ruleTypeAlias
{ after(grammarAccess.getSentenceAccess().getTypeAliasParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getNodeParserRuleCall_6()); }
	ruleNode
{ after(grammarAccess.getSentenceAccess().getNodeParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getStreamParserRuleCall_7()); }
	ruleStream
{ after(grammarAccess.getSentenceAccess().getStreamParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getCanvasParserRuleCall_8()); }
	ruleCanvas
{ after(grammarAccess.getSentenceAccess().getCanvasParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getBlockParserRuleCall_9()); }
	ruleBlock
{ after(grammarAccess.getSentenceAccess().getBlockParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSentenceAccess().getNoopParserRuleCall_10()); }
	ruleNoop
{ after(grammarAccess.getSentenceAccess().getNoopParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNodeAccess().getInvokationParserRuleCall_0()); }
	ruleInvokation
{ after(grammarAccess.getNodeAccess().getInvokationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getFactoryParserRuleCall_1()); }
	ruleFactory
{ after(grammarAccess.getNodeAccess().getFactoryParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getLoopParserRuleCall_2()); }
	ruleLoop
{ after(grammarAccess.getNodeAccess().getLoopParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getSwitchParserRuleCall_3()); }
	ruleSwitch
{ after(grammarAccess.getNodeAccess().getSwitchParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getNodeAccess().getFileParserRuleCall_4()); }
	ruleFile
{ after(grammarAccess.getNodeAccess().getFileParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getGroup_0()); }
(rule__LiteralExpressionSigned__Group_0__0)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getLiteralExpressionTerminalParserRuleCall_1()); }
	ruleLiteralExpressionTerminal
{ after(grammarAccess.getLiteralExpressionSignedAccess().getLiteralExpressionTerminalParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__OpAlternatives_0_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getOpAddOpEnumRuleCall_0_1_0_0()); }
	ruleAddOp
{ after(grammarAccess.getLiteralExpressionSignedAccess().getOpAddOpEnumRuleCall_0_1_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getOpNegationOpEnumRuleCall_0_1_0_1()); }
	ruleNegationOp
{ after(grammarAccess.getLiteralExpressionSignedAccess().getOpNegationOpEnumRuleCall_0_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionTerminal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getGroup_0()); }
(rule__LiteralExpressionTerminal__Group_0__0)
{ after(grammarAccess.getLiteralExpressionTerminalAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getRValueParserRuleCall_1()); }
	ruleRValue
{ after(grammarAccess.getLiteralExpressionTerminalAccess().getRValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRValueAccess().getSingleLiteralParserRuleCall_0()); }
	ruleSingleLiteral
{ after(grammarAccess.getRValueAccess().getSingleLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRValueAccess().getSequenceLiteralParserRuleCall_1()); }
	ruleSequenceLiteral
{ after(grammarAccess.getRValueAccess().getSequenceLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getRValueAccess().getTupleLiteralParserRuleCall_2()); }
	ruleTupleLiteral
{ after(grammarAccess.getRValueAccess().getTupleLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getRValueAccess().getConstantRefParserRuleCall_3()); }
	ruleConstantRef
{ after(grammarAccess.getRValueAccess().getConstantRefParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleLiteralDT__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleLiteralDTAccess().getBoolLiteralParserRuleCall_0()); }
	ruleBoolLiteral
{ after(grammarAccess.getSingleLiteralDTAccess().getBoolLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSingleLiteralDTAccess().getNumberLiteralParserRuleCall_1()); }
	ruleNumberLiteral
{ after(grammarAccess.getSingleLiteralDTAccess().getNumberLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSingleLiteralDTAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getSingleLiteralDTAccess().getStringLiteralParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberLiteralAccess().getIntegerParserRuleCall_0()); }
	ruleInteger
{ after(grammarAccess.getNumberLiteralAccess().getIntegerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getFloatParserRuleCall_1()); }
	ruleFloat
{ after(grammarAccess.getNumberLiteralAccess().getFloatParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getSNotationParserRuleCall_2()); }
	ruleSNotation
{ after(grammarAccess.getNumberLiteralAccess().getSNotationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getNumberLiteralAccess().getImaginaryParserRuleCall_3()); }
	ruleImaginary
{ after(grammarAccess.getNumberLiteralAccess().getImaginaryParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getIntegerAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getOCTTerminalRuleCall_1()); }
	RULE_OCT
{ after(grammarAccess.getIntegerAccess().getOCTTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getHEXTerminalRuleCall_2()); }
	RULE_HEX
{ after(grammarAccess.getIntegerAccess().getHEXTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getIntegerAccess().getBINTerminalRuleCall_3()); }
	RULE_BIN
{ after(grammarAccess.getIntegerAccess().getBINTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getGroup_0()); }
(rule__Float__Group_0__0)
{ after(grammarAccess.getFloatAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFloatAccess().getGroup_1()); }
(rule__Float__Group_1__0)
{ after(grammarAccess.getFloatAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SNotation__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSNotationAccess().getINTTerminalRuleCall_0_0()); }
	RULE_INT
{ after(grammarAccess.getSNotationAccess().getINTTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getSNotationAccess().getFloatParserRuleCall_0_1()); }
	ruleFloat
{ after(grammarAccess.getSNotationAccess().getFloatParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpConstant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpConstantAccess().getEKeyword_0()); }

	'e' 

{ after(grammarAccess.getExpConstantAccess().getEKeyword_0()); }
)

    |(
{ before(grammarAccess.getExpConstantAccess().getEKeyword_1()); }

	'E' 

{ after(grammarAccess.getExpConstantAccess().getEKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sign__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getSignAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Imaginary__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImaginaryAccess().getINTTerminalRuleCall_0_0()); }
	RULE_INT
{ after(grammarAccess.getImaginaryAccess().getINTTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getImaginaryAccess().getFloatParserRuleCall_0_1()); }
	ruleFloat
{ after(grammarAccess.getImaginaryAccess().getFloatParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ImaginaryConstant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImaginaryConstantAccess().getIKeyword_0()); }

	'i' 

{ after(grammarAccess.getImaginaryConstantAccess().getIKeyword_0()); }
)

    |(
{ before(grammarAccess.getImaginaryConstantAccess().getJKeyword_1()); }

	'j' 

{ after(grammarAccess.getImaginaryConstantAccess().getJKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolLiteralAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBoolLiteralAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBoolLiteralAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBoolLiteralAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteral__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralPlainParserRuleCall_0()); }
	ruleSequenceLiteralPlain
{ after(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralPlainParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralSerieParserRuleCall_1()); }
	ruleSequenceLiteralSerie
{ after(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralSerieParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unit__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitAccess().getDUnitParserRuleCall_0()); }
	ruleDUnit
{ after(grammarAccess.getUnitAccess().getDUnitParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getUnitAccess().getNUnitParserRuleCall_1()); }
	ruleNUnit
{ after(grammarAccess.getUnitAccess().getNUnitParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeRef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeRefAccess().getPlainTypeRefParserRuleCall_0()); }
	rulePlainTypeRef
{ after(grammarAccess.getTypeRefAccess().getPlainTypeRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeRefAccess().getCompositeTypeRefParserRuleCall_1()); }
	ruleCompositeTypeRef
{ after(grammarAccess.getTypeRefAccess().getCompositeTypeRefParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlainTypeRef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlainTypeRefAccess().getVoidTypeRefParserRuleCall_0()); }
	ruleVoidTypeRef
{ after(grammarAccess.getPlainTypeRefAccess().getVoidTypeRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getAutoTypeRefParserRuleCall_1()); }
	ruleAutoTypeRef
{ after(grammarAccess.getPlainTypeRefAccess().getAutoTypeRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getNumberTypeRefParserRuleCall_2()); }
	ruleNumberTypeRef
{ after(grammarAccess.getPlainTypeRefAccess().getNumberTypeRefParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getVisualTypeRefParserRuleCall_3()); }
	ruleVisualTypeRef
{ after(grammarAccess.getPlainTypeRefAccess().getVisualTypeRefParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getAuxTypeRefParserRuleCall_4()); }
	ruleAuxTypeRef
{ after(grammarAccess.getPlainTypeRefAccess().getAuxTypeRefParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getTypeAliasRefParserRuleCall_5()); }
	ruleTypeAliasRef
{ after(grammarAccess.getPlainTypeRefAccess().getTypeAliasRefParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getShapeRefParserRuleCall_6()); }
	ruleShapeRef
{ after(grammarAccess.getPlainTypeRefAccess().getShapeRefParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getBoxRefParserRuleCall_7()); }
	ruleBoxRef
{ after(grammarAccess.getPlainTypeRefAccess().getBoxRefParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getUnitRefParserRuleCall_8()); }
	ruleUnitRef
{ after(grammarAccess.getPlainTypeRefAccess().getUnitRefParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getPlainTypeRefAccess().getCollectionRefParserRuleCall_9()); }
	ruleCollectionRef
{ after(grammarAccess.getPlainTypeRefAccess().getCollectionRefParserRuleCall_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompositeTypeRef__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompositeTypeRefAccess().getSequenceTypeRefParserRuleCall_0()); }
	ruleSequenceTypeRef
{ after(grammarAccess.getCompositeTypeRefAccess().getSequenceTypeRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getCompositeTypeRefAccess().getTupleTypeRefParserRuleCall_1()); }
	ruleTupleTypeRef
{ after(grammarAccess.getCompositeTypeRefAccess().getTupleTypeRefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getCompositeTypeRefAccess().getSetTypeRefParserRuleCall_2()); }
	ruleSetTypeRef
{ after(grammarAccess.getCompositeTypeRefAccess().getSetTypeRefParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RStreamValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRStreamValueAccess().getInputRefParserRuleCall_0()); }
	ruleInputRef
{ after(grammarAccess.getRStreamValueAccess().getInputRefParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getRStreamValueAccess().getLiteralExpressionParserRuleCall_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getRStreamValueAccess().getLiteralExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__File__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getIsinputAssignment_2_0()); }
(rule__File__IsinputAssignment_2_0)
{ after(grammarAccess.getFileAccess().getIsinputAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getFileAccess().getHyphenMinusGreaterThanSignKeyword_2_1()); }

	'->' 

{ after(grammarAccess.getFileAccess().getHyphenMinusGreaterThanSignKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinOpAccess().getAndEnumLiteralDeclaration_0()); }
(	'&&' 
)
{ after(grammarAccess.getBinOpAccess().getAndEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinOpAccess().getOrEnumLiteralDeclaration_1()); }
(	'||' 
)
{ after(grammarAccess.getBinOpAccess().getOrEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CompOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompOpAccess().getEqEnumLiteralDeclaration_0()); }
(	'==' 
)
{ after(grammarAccess.getCompOpAccess().getEqEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCompOpAccess().getNeEnumLiteralDeclaration_1()); }
(	'!=' 
)
{ after(grammarAccess.getCompOpAccess().getNeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCompOpAccess().getLtEnumLiteralDeclaration_2()); }
(	'<' 
)
{ after(grammarAccess.getCompOpAccess().getLtEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCompOpAccess().getGtEnumLiteralDeclaration_3()); }
(	'>' 
)
{ after(grammarAccess.getCompOpAccess().getGtEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCompOpAccess().getLeEnumLiteralDeclaration_4()); }
(	'<=' 
)
{ after(grammarAccess.getCompOpAccess().getLeEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getCompOpAccess().getGeEnumLiteralDeclaration_5()); }
(	'>=' 
)
{ after(grammarAccess.getCompOpAccess().getGeEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOpAccess().getPlusEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getAddOpAccess().getPlusEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAddOpAccess().getMinusEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getAddOpAccess().getMinusEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiOpAccess().getTimesEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getMultiOpAccess().getTimesEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getMultiOpAccess().getModuloEnumLiteralDeclaration_1()); }
(	'%' 
)
{ after(grammarAccess.getMultiOpAccess().getModuloEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getMultiOpAccess().getIntdivisionEnumLiteralDeclaration_2()); }
(	'//' 
)
{ after(grammarAccess.getMultiOpAccess().getIntdivisionEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getMultiOpAccess().getDividebyEnumLiteralDeclaration_3()); }
(	'/' 
)
{ after(grammarAccess.getMultiOpAccess().getDividebyEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTypeAccess().getPositiveEnumLiteralDeclaration_0()); }
(	'positive' 
)
{ after(grammarAccess.getNumberTypeAccess().getPositiveEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNumberTypeAccess().getNaturalEnumLiteralDeclaration_1()); }
(	'natural' 
)
{ after(grammarAccess.getNumberTypeAccess().getNaturalEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNumberTypeAccess().getIntegerEnumLiteralDeclaration_2()); }
(	'integer' 
)
{ after(grammarAccess.getNumberTypeAccess().getIntegerEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getNumberTypeAccess().getRationalEnumLiteralDeclaration_3()); }
(	'rational' 
)
{ after(grammarAccess.getNumberTypeAccess().getRationalEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisualType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualTypeAccess().getShapeEnumLiteralDeclaration_0()); }
(	'shape' 
)
{ after(grammarAccess.getVisualTypeAccess().getShapeEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getVisualTypeAccess().getColorEnumLiteralDeclaration_1()); }
(	'color' 
)
{ after(grammarAccess.getVisualTypeAccess().getColorEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getVisualTypeAccess().getAngleEnumLiteralDeclaration_2()); }
(	'angle' 
)
{ after(grammarAccess.getVisualTypeAccess().getAngleEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getVisualTypeAccess().getSizeEnumLiteralDeclaration_3()); }
(	'size' 
)
{ after(grammarAccess.getVisualTypeAccess().getSizeEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getVisualTypeAccess().getPositionEnumLiteralDeclaration_4()); }
(	'position' 
)
{ after(grammarAccess.getVisualTypeAccess().getPositionEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getVisualTypeAccess().getTextureEnumLiteralDeclaration_5()); }
(	'texture' 
)
{ after(grammarAccess.getVisualTypeAccess().getTextureEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AuxType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxTypeAccess().getStringEnumLiteralDeclaration_0()); }
(	'string' 
)
{ after(grammarAccess.getAuxTypeAccess().getStringEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getAuxTypeAccess().getBoolEnumLiteralDeclaration_1()); }
(	'bool' 
)
{ after(grammarAccess.getAuxTypeAccess().getBoolEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0()); }
(	'set' 
)
{ after(grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1()); }
(	'bag' 
)
{ after(grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getListEnumLiteralDeclaration_2()); }
(	'list' 
)
{ after(grammarAccess.getCollectionTypeAccess().getListEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getGraphEnumLiteralDeclaration_3()); }
(	'graph' 
)
{ after(grammarAccess.getCollectionTypeAccess().getGraphEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getCollectionTypeAccess().getSingleEnumLiteralDeclaration_4()); }
(	'single' 
)
{ after(grammarAccess.getCollectionTypeAccess().getSingleEnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleAction_0()); }
(

)
{ after(grammarAccess.getModuleAccess().getModuleAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_1()); }
(rule__Module__Group_1__0)?
{ after(grammarAccess.getModuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_2()); }
(rule__Module__Group_2__0)?
{ after(grammarAccess.getModuleAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
	rule__Module__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_3()); }
(rule__Module__Group_3__0)?
{ after(grammarAccess.getModuleAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__4__Impl
	rule__Module__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_4()); }
(rule__Module__Group_4__0)?
{ after(grammarAccess.getModuleAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__5__Impl
	rule__Module__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_5()); }
(rule__Module__Group_5__0)?
{ after(grammarAccess.getModuleAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__6__Impl
	rule__Module__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getGroup_6()); }
(rule__Module__Group_6__0)?
{ after(grammarAccess.getModuleAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__7__Impl
	rule__Module__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getImportsAssignment_7()); }
(rule__Module__ImportsAssignment_7)*
{ after(grammarAccess.getModuleAccess().getImportsAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getSentencesAssignment_8()); }
(rule__Module__SentencesAssignment_8)*
{ after(grammarAccess.getModuleAccess().getSentencesAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__Module__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_1__0__Impl
	rule__Module__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleKeyword_1_0()); }

	'module' 

{ after(grammarAccess.getModuleAccess().getModuleKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameAssignment_1_1()); }
(rule__Module__NameAssignment_1_1)
{ after(grammarAccess.getModuleAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_2__0__Impl
	rule__Module__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputKeyword_2_0()); }

	'input' 

{ after(grammarAccess.getModuleAccess().getInputKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputtypeAssignment_2_1()); }
(rule__Module__InputtypeAssignment_2_1)
{ after(grammarAccess.getModuleAccess().getInputtypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_3__0__Impl
	rule__Module__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputKeyword_3_0()); }

	'output' 

{ after(grammarAccess.getModuleAccess().getOutputKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputtypeAssignment_3_1()); }
(rule__Module__OutputtypeAssignment_3_1)
{ after(grammarAccess.getModuleAccess().getOutputtypeAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_4__0__Impl
	rule__Module__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getAuthorKeyword_4_0()); }

	'author' 

{ after(grammarAccess.getModuleAccess().getAuthorKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getAuthorAssignment_4_1()); }
(rule__Module__AuthorAssignment_4_1)
{ after(grammarAccess.getModuleAccess().getAuthorAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_5__0__Impl
	rule__Module__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getCreationKeyword_5_0()); }

	'creation' 

{ after(grammarAccess.getModuleAccess().getCreationKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getCreationAssignment_5_1()); }
(rule__Module__CreationAssignment_5_1)
{ after(grammarAccess.getModuleAccess().getCreationAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Module__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_6__0__Impl
	rule__Module__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getMoreKeyword_6_0()); }

	'more' 

{ after(grammarAccess.getModuleAccess().getMoreKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getLinkAssignment_6_1()); }
(rule__Module__LinkAssignment_6_1)
{ after(grammarAccess.getModuleAccess().getLinkAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
(rule__Import__ImportURIAssignment_1)
{ after(grammarAccess.getImportAccess().getImportURIAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Switch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__0__Impl
	rule__Switch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchAccess().getSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__1__Impl
	rule__Switch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getNameAssignment_1()); }
(rule__Switch__NameAssignment_1)
{ after(grammarAccess.getSwitchAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__2__Impl
	rule__Switch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getTestAssignment_2()); }
(rule__Switch__TestAssignment_2)
{ after(grammarAccess.getSwitchAccess().getTestAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__3__Impl
	rule__Switch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getQuestionMarkKeyword_3()); }

	'?' 

{ after(grammarAccess.getSwitchAccess().getQuestionMarkKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__4__Impl
	rule__Switch__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getAAssignment_4()); }
(rule__Switch__AAssignment_4)
{ after(grammarAccess.getSwitchAccess().getAAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__5__Impl
	rule__Switch__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getColonKeyword_5()); }

	':' 

{ after(grammarAccess.getSwitchAccess().getColonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Switch__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Switch__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getBAssignment_6()); }
(rule__Switch__BAssignment_6)
{ after(grammarAccess.getSwitchAccess().getBAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__LiteralExpressionBin__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionBin__Group__0__Impl
	rule__LiteralExpressionBin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getLiteralExpressionCompParserRuleCall_0()); }
	ruleLiteralExpressionComp
{ after(grammarAccess.getLiteralExpressionBinAccess().getLiteralExpressionCompParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionBin__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionBin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getGroup_1()); }
(rule__LiteralExpressionBin__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionBinAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpressionBin__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionBin__Group_1__0__Impl
	rule__LiteralExpressionBin__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionBinAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionBin__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionBin__Group_1__1__Impl
	rule__LiteralExpressionBin__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getOpAssignment_1_1()); }
(rule__LiteralExpressionBin__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionBinAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionBin__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionBin__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getRightAssignment_1_2()); }
(rule__LiteralExpressionBin__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionBinAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionComp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionComp__Group__0__Impl
	rule__LiteralExpressionComp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getLiteralExpressionAddParserRuleCall_0()); }
	ruleLiteralExpressionAdd
{ after(grammarAccess.getLiteralExpressionCompAccess().getLiteralExpressionAddParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionComp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionComp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getGroup_1()); }
(rule__LiteralExpressionComp__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionCompAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpressionComp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionComp__Group_1__0__Impl
	rule__LiteralExpressionComp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionCompAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionComp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionComp__Group_1__1__Impl
	rule__LiteralExpressionComp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getOpAssignment_1_1()); }
(rule__LiteralExpressionComp__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionCompAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionComp__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionComp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getRightAssignment_1_2()); }
(rule__LiteralExpressionComp__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionCompAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionAdd__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionAdd__Group__0__Impl
	rule__LiteralExpressionAdd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getLiteralExpressionMultiParserRuleCall_0()); }
	ruleLiteralExpressionMulti
{ after(grammarAccess.getLiteralExpressionAddAccess().getLiteralExpressionMultiParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionAdd__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionAdd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getGroup_1()); }
(rule__LiteralExpressionAdd__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionAddAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpressionAdd__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionAdd__Group_1__0__Impl
	rule__LiteralExpressionAdd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionAddAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionAdd__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionAdd__Group_1__1__Impl
	rule__LiteralExpressionAdd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getOpAssignment_1_1()); }
(rule__LiteralExpressionAdd__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionAddAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionAdd__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionAdd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getRightAssignment_1_2()); }
(rule__LiteralExpressionAdd__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionAddAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionMulti__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionMulti__Group__0__Impl
	rule__LiteralExpressionMulti__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getLiteralExpressionExpParserRuleCall_0()); }
	ruleLiteralExpressionExp
{ after(grammarAccess.getLiteralExpressionMultiAccess().getLiteralExpressionExpParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionMulti__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionMulti__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getGroup_1()); }
(rule__LiteralExpressionMulti__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionMultiAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpressionMulti__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionMulti__Group_1__0__Impl
	rule__LiteralExpressionMulti__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionMultiAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionMulti__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionMulti__Group_1__1__Impl
	rule__LiteralExpressionMulti__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getOpAssignment_1_1()); }
(rule__LiteralExpressionMulti__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionMultiAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionMulti__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionMulti__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getRightAssignment_1_2()); }
(rule__LiteralExpressionMulti__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionMultiAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionExp__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionExp__Group__0__Impl
	rule__LiteralExpressionExp__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getLiteralExpressionSignedParserRuleCall_0()); }
	ruleLiteralExpressionSigned
{ after(grammarAccess.getLiteralExpressionExpAccess().getLiteralExpressionSignedParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionExp__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionExp__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getGroup_1()); }
(rule__LiteralExpressionExp__Group_1__0)?
{ after(grammarAccess.getLiteralExpressionExpAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralExpressionExp__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionExp__Group_1__0__Impl
	rule__LiteralExpressionExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionExpAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionExp__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionExp__Group_1__1__Impl
	rule__LiteralExpressionExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getOpAssignment_1_1()); }
(rule__LiteralExpressionExp__OpAssignment_1_1)
{ after(grammarAccess.getLiteralExpressionExpAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionExp__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getRightAssignment_1_2()); }
(rule__LiteralExpressionExp__RightAssignment_1_2)
{ after(grammarAccess.getLiteralExpressionExpAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionSigned__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionSigned__Group_0__0__Impl
	rule__LiteralExpressionSigned__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getUnaryOperationAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getUnaryOperationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionSigned__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionSigned__Group_0__1__Impl
	rule__LiteralExpressionSigned__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getOpAssignment_0_1()); }
(rule__LiteralExpressionSigned__OpAssignment_0_1)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getOpAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionSigned__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionSigned__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getRightAssignment_0_2()); }
(rule__LiteralExpressionSigned__RightAssignment_0_2)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getRightAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralExpressionTerminal__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionTerminal__Group_0__0__Impl
	rule__LiteralExpressionTerminal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionTerminal__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getLiteralExpressionTerminalAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionTerminal__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionTerminal__Group_0__1__Impl
	rule__LiteralExpressionTerminal__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionTerminal__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getLiteralExpressionParserRuleCall_0_1()); }
	ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionTerminalAccess().getLiteralExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpressionTerminal__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralExpressionTerminal__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionTerminal__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionTerminalAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getLiteralExpressionTerminalAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Float__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_0__0__Impl
	rule__Float__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_0()); }
	RULE_INT
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_0__1__Impl
	rule__Float__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getFloatAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_2()); }
(	RULE_INT)?
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Float__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1__0__Impl
	rule__Float__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getFloatAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Float__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Float__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Float__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1()); }
	RULE_INT
{ after(grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SNotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SNotation__Group__0__Impl
	rule__SNotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SNotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSNotationAccess().getAlternatives_0()); }
(rule__SNotation__Alternatives_0)
{ after(grammarAccess.getSNotationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SNotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SNotation__Group__1__Impl
	rule__SNotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SNotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSNotationAccess().getExpConstantParserRuleCall_1()); }
	ruleExpConstant
{ after(grammarAccess.getSNotationAccess().getExpConstantParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SNotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SNotation__Group__2__Impl
	rule__SNotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SNotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSNotationAccess().getSignParserRuleCall_2()); }
(	ruleSign)?
{ after(grammarAccess.getSNotationAccess().getSignParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SNotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SNotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SNotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSNotationAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getSNotationAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Imaginary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imaginary__Group__0__Impl
	rule__Imaginary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Imaginary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImaginaryAccess().getAlternatives_0()); }
(rule__Imaginary__Alternatives_0)?
{ after(grammarAccess.getImaginaryAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Imaginary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Imaginary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Imaginary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImaginaryAccess().getImaginaryConstantParserRuleCall_1()); }
	ruleImaginaryConstant
{ after(grammarAccess.getImaginaryAccess().getImaginaryConstantParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceLiteralSerie__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__0__Impl
	rule__SequenceLiteralSerie__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getLeftSquareBracketFullStopFullStopKeyword_0()); }

	'[..' 

{ after(grammarAccess.getSequenceLiteralSerieAccess().getLeftSquareBracketFullStopFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__1__Impl
	rule__SequenceLiteralSerie__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getInitAssignment_1()); }
(rule__SequenceLiteralSerie__InitAssignment_1)
{ after(grammarAccess.getSequenceLiteralSerieAccess().getInitAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__2__Impl
	rule__SequenceLiteralSerie__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getHyphenMinusGreaterThanSignKeyword_2()); }

	'->' 

{ after(grammarAccess.getSequenceLiteralSerieAccess().getHyphenMinusGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__3__Impl
	rule__SequenceLiteralSerie__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getEndAssignment_3()); }
(rule__SequenceLiteralSerie__EndAssignment_3)
{ after(grammarAccess.getSequenceLiteralSerieAccess().getEndAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__4__Impl
	rule__SequenceLiteralSerie__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getGroup_4()); }
(rule__SequenceLiteralSerie__Group_4__0)?
{ after(grammarAccess.getSequenceLiteralSerieAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getSequenceLiteralSerieAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SequenceLiteralSerie__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group_4__0__Impl
	rule__SequenceLiteralSerie__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getSequenceLiteralSerieAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralSerie__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralSerie__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getIncAssignment_4_1()); }
(rule__SequenceLiteralSerie__IncAssignment_4_1)
{ after(grammarAccess.getSequenceLiteralSerieAccess().getIncAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceLiteralPlain__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group__0__Impl
	rule__SequenceLiteralPlain__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getSequenceLiteralPlainAction_0()); }
(

)
{ after(grammarAccess.getSequenceLiteralPlainAccess().getSequenceLiteralPlainAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralPlain__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group__1__Impl
	rule__SequenceLiteralPlain__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSequenceLiteralPlainAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralPlain__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group__2__Impl
	rule__SequenceLiteralPlain__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2()); }
(rule__SequenceLiteralPlain__Group_2__0)?
{ after(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralPlain__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getSequenceLiteralPlainAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__SequenceLiteralPlain__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group_2__0__Impl
	rule__SequenceLiteralPlain__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_0()); }
(rule__SequenceLiteralPlain__ItemsAssignment_2_0)
{ after(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralPlain__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2_1()); }
(rule__SequenceLiteralPlain__Group_2_1__0)*
{ after(grammarAccess.getSequenceLiteralPlainAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceLiteralPlain__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group_2_1__0__Impl
	rule__SequenceLiteralPlain__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getSequenceLiteralPlainAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceLiteralPlain__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceLiteralPlain__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_1_1()); }
(rule__SequenceLiteralPlain__ItemsAssignment_2_1_1)
{ after(grammarAccess.getSequenceLiteralPlainAccess().getItemsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__0__Impl
	rule__TupleLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_0()); }
(

)
{ after(grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__1__Impl
	rule__TupleLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTupleLiteralAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__2__Impl
	rule__TupleLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getGroup_2()); }
(rule__TupleLiteral__Group_2__0)?
{ after(grammarAccess.getTupleLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTupleLiteralAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TupleLiteral__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group_2__0__Impl
	rule__TupleLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_0()); }
(rule__TupleLiteral__ItemsAssignment_2_0)
{ after(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getGroup_2_1()); }
(rule__TupleLiteral__Group_2_1__0)*
{ after(grammarAccess.getTupleLiteralAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleLiteral__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group_2_1__0__Impl
	rule__TupleLiteral__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getTupleLiteralAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleLiteral__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleLiteral__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_1_1()); }
(rule__TupleLiteral__ItemsAssignment_2_1_1)
{ after(grammarAccess.getTupleLiteralAccess().getItemsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleItem__Group__0__Impl
	rule__TupleItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleItemAccess().getNameAssignment_0()); }
(rule__TupleItem__NameAssignment_0)
{ after(grammarAccess.getTupleItemAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleItem__Group__1__Impl
	rule__TupleItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleItemAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTupleItemAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleItem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleItemAccess().getValueAssignment_2()); }
(rule__TupleItem__ValueAssignment_2)
{ after(grammarAccess.getTupleItemAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getGroup_2()); }
(rule__Block__Group_2__0)?
{ after(grammarAccess.getBlockAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
	rule__Block__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSentencesAssignment_3()); }
(rule__Block__SentencesAssignment_3)*
{ after(grammarAccess.getBlockAccess().getSentencesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Block__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_2__0__Impl
	rule__Block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getTildeKeyword_2_0()); }

	'~' 

{ after(grammarAccess.getBlockAccess().getTildeKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getNameAssignment_2_1()); }
(rule__Block__NameAssignment_2_1)
{ after(grammarAccess.getBlockAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Noop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Noop__Group__0__Impl
	rule__Noop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Noop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoopAccess().getNoopAction_0()); }
(

)
{ after(grammarAccess.getNoopAccess().getNoopAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Noop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Noop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Noop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoopAccess().getNameAssignment_1()); }
(rule__Noop__NameAssignment_1)
{ after(grammarAccess.getNoopAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Pair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__0__Impl
	rule__Pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getNameAssignment_0()); }
(rule__Pair__NameAssignment_0)
{ after(grammarAccess.getPairAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__1__Impl
	rule__Pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getPairAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueAssignment_2()); }
(rule__Pair__ValueAssignment_2)
{ after(grammarAccess.getPairAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Constant__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getConstantKeyword_0()); }

	'constant' 

{ after(grammarAccess.getConstantAccess().getConstantKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__1__Impl
	rule__Constant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameAssignment_1()); }
(rule__Constant__NameAssignment_1)
{ after(grammarAccess.getConstantAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__2__Impl
	rule__Constant__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTypeAssignment_2()); }
(rule__Constant__TypeAssignment_2)
{ after(grammarAccess.getConstantAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__3__Impl
	rule__Constant__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getConstantAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Constant__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueAssignment_4()); }
(rule__Constant__ValueAssignment_4)
{ after(grammarAccess.getConstantAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Multi__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__0__Impl
	rule__Multi__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getMultiKeyword_0()); }

	'multi' 

{ after(grammarAccess.getMultiAccess().getMultiKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__1__Impl
	rule__Multi__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getNameAssignment_1()); }
(rule__Multi__NameAssignment_1)
{ after(grammarAccess.getMultiAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__2__Impl
	rule__Multi__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getMultiAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__3__Impl
	rule__Multi__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getOpAssignment_3()); }
(rule__Multi__OpAssignment_3)?
{ after(grammarAccess.getMultiAccess().getOpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__4__Impl
	rule__Multi__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getFactorAssignment_4()); }
(rule__Multi__FactorAssignment_4)
{ after(grammarAccess.getMultiAccess().getFactorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multi__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multi__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getParentAssignment_5()); }
(rule__Multi__ParentAssignment_5)?
{ after(grammarAccess.getMultiAccess().getParentAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__0__Impl
	rule__DUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getUnitKeyword_0()); }

	'unit' 

{ after(grammarAccess.getDUnitAccess().getUnitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__1__Impl
	rule__DUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getNameAssignment_1()); }
(rule__DUnit__NameAssignment_1)
{ after(grammarAccess.getDUnitAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__2__Impl
	rule__DUnit__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getDUnitAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__3__Impl
	rule__DUnit__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getOpAssignment_3()); }
(rule__DUnit__OpAssignment_3)?
{ after(grammarAccess.getDUnitAccess().getOpAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__4__Impl
	rule__DUnit__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getFactorAssignment_4()); }
(rule__DUnit__FactorAssignment_4)
{ after(grammarAccess.getDUnitAccess().getFactorAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__5__Impl
	rule__DUnit__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getMultiAssignment_5()); }
(rule__DUnit__MultiAssignment_5)?
{ after(grammarAccess.getDUnitAccess().getMultiAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DUnit__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DUnit__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getParentAssignment_6()); }
(rule__DUnit__ParentAssignment_6)
{ after(grammarAccess.getDUnitAccess().getParentAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__NUnit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUnit__Group__0__Impl
	rule__NUnit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NUnit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUnitAccess().getUnitKeyword_0()); }

	'unit' 

{ after(grammarAccess.getNUnitAccess().getUnitKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUnit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUnit__Group__1__Impl
	rule__NUnit__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NUnit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUnitAccess().getNameAssignment_1()); }
(rule__NUnit__NameAssignment_1)
{ after(grammarAccess.getNUnitAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NUnit__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NUnit__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NUnit__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUnitAccess().getNumbertypeAssignment_2()); }
(rule__NUnit__NumbertypeAssignment_2)
{ after(grammarAccess.getNUnitAccess().getNumbertypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Box__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Box__Group__0__Impl
	rule__Box__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getBoxKeyword_0()); }

	'box' 

{ after(grammarAccess.getBoxAccess().getBoxKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Box__Group__1__Impl
	rule__Box__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getNameAssignment_1()); }
(rule__Box__NameAssignment_1)
{ after(grammarAccess.getBoxAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Box__Group__2__Impl
	rule__Box__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getBoxAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Box__Group__3__Impl
	rule__Box__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getMembersAssignment_3()); }
(rule__Box__MembersAssignment_3)*
{ after(grammarAccess.getBoxAccess().getMembersAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Box__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Box__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Box__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getBoxAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Shape__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Shape__Group__0__Impl
	rule__Shape__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeAccess().getShapeKeyword_0()); }

	'shape' 

{ after(grammarAccess.getShapeAccess().getShapeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Shape__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Shape__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Shape__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeAccess().getNameAssignment_1()); }
(rule__Shape__NameAssignment_1)
{ after(grammarAccess.getShapeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Member__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Member__Group__0__Impl
	rule__Member__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Member__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getNameAssignment_0()); }
(rule__Member__NameAssignment_0)
{ after(grammarAccess.getMemberAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Member__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Member__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Member__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getTypeAssignment_1()); }
(rule__Member__TypeAssignment_1)
{ after(grammarAccess.getMemberAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceTypeRef__Group__0__Impl
	rule__SequenceTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getSequenceTypeRefAction_0()); }
(

)
{ after(grammarAccess.getSequenceTypeRefAccess().getSequenceTypeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceTypeRef__Group__1__Impl
	rule__SequenceTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getSequenceTypeRefAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceTypeRef__Group__2__Impl
	rule__SequenceTypeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceTypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getTypeAssignment_2()); }
(rule__SequenceTypeRef__TypeAssignment_2)
{ after(grammarAccess.getSequenceTypeRefAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceTypeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceTypeRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceTypeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getSequenceTypeRefAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TupleTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group__0__Impl
	rule__TupleTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getTupleTypeRefAction_0()); }
(

)
{ after(grammarAccess.getTupleTypeRefAccess().getTupleTypeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group__1__Impl
	rule__TupleTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getTupleTypeRefAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group__2__Impl
	rule__TupleTypeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getGroup_2()); }
(rule__TupleTypeRef__Group_2__0)?
{ after(grammarAccess.getTupleTypeRefAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getTupleTypeRefAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TupleTypeRef__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group_2__0__Impl
	rule__TupleTypeRef__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_0()); }
(rule__TupleTypeRef__ItemsAssignment_2_0)
{ after(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRef__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getGroup_2_1()); }
(rule__TupleTypeRef__Group_2_1__0)*
{ after(grammarAccess.getTupleTypeRefAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleTypeRef__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group_2_1__0__Impl
	rule__TupleTypeRef__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getTupleTypeRefAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRef__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRef__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_1_1()); }
(rule__TupleTypeRef__ItemsAssignment_2_1_1)
{ after(grammarAccess.getTupleTypeRefAccess().getItemsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TupleTypeRefItem__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRefItem__Group__0__Impl
	rule__TupleTypeRefItem__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRefItem__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getNameAssignment_0()); }
(rule__TupleTypeRefItem__NameAssignment_0)
{ after(grammarAccess.getTupleTypeRefItemAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRefItem__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRefItem__Group__1__Impl
	rule__TupleTypeRefItem__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRefItem__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTupleTypeRefItemAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TupleTypeRefItem__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TupleTypeRefItem__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRefItem__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getTypeAssignment_2()); }
(rule__TupleTypeRefItem__TypeAssignment_2)
{ after(grammarAccess.getTupleTypeRefItemAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SetTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTypeRef__Group__0__Impl
	rule__SetTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeRefAccess().getSetTypeRefAction_0()); }
(

)
{ after(grammarAccess.getSetTypeRefAccess().getSetTypeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTypeRef__Group__1__Impl
	rule__SetTypeRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeRefAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getSetTypeRefAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTypeRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTypeRef__Group__2__Impl
	rule__SetTypeRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTypeRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeRefAccess().getTypeAssignment_2()); }
(rule__SetTypeRef__TypeAssignment_2)
{ after(grammarAccess.getSetTypeRefAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SetTypeRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SetTypeRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SetTypeRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeRefAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getSetTypeRefAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__AutoTypeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AutoTypeRef__Group__0__Impl
	rule__AutoTypeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoTypeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutoTypeRefAccess().getAutoTypeRefAction_0()); }
(

)
{ after(grammarAccess.getAutoTypeRefAccess().getAutoTypeRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AutoTypeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AutoTypeRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AutoTypeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAutoTypeRefAccess().getAutoKeyword_1()); }

	'auto' 

{ after(grammarAccess.getAutoTypeRefAccess().getAutoKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CollectionRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionRef__Group__0__Impl
	rule__CollectionRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getCollectionAssignment_0()); }
(rule__CollectionRef__CollectionAssignment_0)
{ after(grammarAccess.getCollectionRefAccess().getCollectionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionRef__Group__1__Impl
	rule__CollectionRef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getCollectionRefAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionRef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionRef__Group__2__Impl
	rule__CollectionRef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getTyperefAssignment_2()); }
(rule__CollectionRef__TyperefAssignment_2)
{ after(grammarAccess.getCollectionRefAccess().getTyperefAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CollectionRef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CollectionRef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getCollectionRefAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UnitRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitRef__Group__0__Impl
	rule__UnitRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitRefAccess().getInKeyword_0()); }

	'in' 

{ after(grammarAccess.getUnitRefAccess().getInKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnitRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnitRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnitRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitRefAccess().getUnittypeAssignment_1()); }
(rule__UnitRef__UnittypeAssignment_1)
{ after(grammarAccess.getUnitRefAccess().getUnittypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoxRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxRef__Group__0__Impl
	rule__BoxRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxRefAccess().getHyphenMinusGreaterThanSignKeyword_0()); }

	'->' 

{ after(grammarAccess.getBoxRefAccess().getHyphenMinusGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoxRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoxRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoxRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxRefAccess().getRefAssignment_1()); }
(rule__BoxRef__RefAssignment_1)
{ after(grammarAccess.getBoxRefAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ShapeRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShapeRef__Group__0__Impl
	rule__ShapeRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeRefAccess().getTildeGreaterThanSignKeyword_0()); }

	'~>' 

{ after(grammarAccess.getShapeRefAccess().getTildeGreaterThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ShapeRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ShapeRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeRefAccess().getRefAssignment_1()); }
(rule__ShapeRef__RefAssignment_1)
{ after(grammarAccess.getShapeRefAccess().getRefAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeAlias__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAlias__Group__0__Impl
	rule__TypeAlias__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAlias__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasAccess().getAliasKeyword_0()); }

	'alias' 

{ after(grammarAccess.getTypeAliasAccess().getAliasKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAlias__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAlias__Group__1__Impl
	rule__TypeAlias__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAlias__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasAccess().getNameAssignment_1()); }
(rule__TypeAlias__NameAssignment_1)
{ after(grammarAccess.getTypeAliasAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeAlias__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeAlias__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAlias__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasAccess().getTypeAssignment_2()); }
(rule__TypeAlias__TypeAssignment_2)
{ after(grammarAccess.getTypeAliasAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Stream__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stream__Group__0__Impl
	rule__Stream__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getNameAssignment_0()); }
(rule__Stream__NameAssignment_0)?
{ after(grammarAccess.getStreamAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stream__Group__1__Impl
	rule__Stream__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getLeftAssignment_1()); }
(rule__Stream__LeftAssignment_1)
{ after(grammarAccess.getStreamAccess().getLeftAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stream__Group__2__Impl
	rule__Stream__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getLessThanSignHyphenMinusKeyword_2()); }

	'<-' 

{ after(grammarAccess.getStreamAccess().getLessThanSignHyphenMinusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Stream__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Stream__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getRightAssignment_3()); }
(rule__Stream__RightAssignment_3)
{ after(grammarAccess.getStreamAccess().getRightAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InputRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputRef__Group__0__Impl
	rule__InputRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputRefAccess().getInputRefAction_0()); }
(

)
{ after(grammarAccess.getInputRefAccess().getInputRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputRefAccess().getIKeyword_1()); }

	'I' 

{ after(grammarAccess.getInputRefAccess().getIKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OutputRef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputRef__Group__0__Impl
	rule__OutputRef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputRef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputRefAccess().getOutputRefAction_0()); }
(

)
{ after(grammarAccess.getOutputRefAccess().getOutputRefAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputRef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputRef__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputRef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputRefAccess().getOKeyword_1()); }

	'O' 

{ after(grammarAccess.getOutputRefAccess().getOKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Invokation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invokation__Group__0__Impl
	rule__Invokation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getModuleAssignment_0()); }
(rule__Invokation__ModuleAssignment_0)
{ after(grammarAccess.getInvokationAccess().getModuleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invokation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invokation__Group__1__Impl
	rule__Invokation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getNameAssignment_1()); }
(rule__Invokation__NameAssignment_1)
{ after(grammarAccess.getInvokationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invokation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invokation__Group__2__Impl
	rule__Invokation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getInvokationAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invokation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invokation__Group__3__Impl
	rule__Invokation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getSentencesAssignment_3()); }
(rule__Invokation__SentencesAssignment_3)*
{ after(grammarAccess.getInvokationAccess().getSentencesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Invokation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Invokation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getInvokationAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InvokationParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InvokationParam__Group__0__Impl
	rule__InvokationParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InvokationParam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationParamAccess().getNameAssignment_0()); }
(rule__InvokationParam__NameAssignment_0)
{ after(grammarAccess.getInvokationParamAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InvokationParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InvokationParam__Group__1__Impl
	rule__InvokationParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InvokationParam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationParamAccess().getLessThanSignHyphenMinusKeyword_1()); }

	'<-' 

{ after(grammarAccess.getInvokationParamAccess().getLessThanSignHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InvokationParam__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InvokationParam__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InvokationParam__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationParamAccess().getSourceAssignment_2()); }
(rule__InvokationParam__SourceAssignment_2)
{ after(grammarAccess.getInvokationParamAccess().getSourceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Loop__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__0__Impl
	rule__Loop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getLoopKeyword_0()); }

	'loop' 

{ after(grammarAccess.getLoopAccess().getLoopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__1__Impl
	rule__Loop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getItAssignment_1()); }
(rule__Loop__ItAssignment_1)?
{ after(grammarAccess.getLoopAccess().getItAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__2__Impl
	rule__Loop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getNameAssignment_2()); }
(rule__Loop__NameAssignment_2)
{ after(grammarAccess.getLoopAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__3__Impl
	rule__Loop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__4__Impl
	rule__Loop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getSentencesAssignment_4()); }
(rule__Loop__SentencesAssignment_4)*
{ after(grammarAccess.getLoopAccess().getSentencesAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Loop__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__LoopSentence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group__0__Impl
	rule__LoopSentence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getNameAssignment_0()); }
(rule__LoopSentence__NameAssignment_0)
{ after(grammarAccess.getLoopSentenceAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopSentence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group__1__Impl
	rule__LoopSentence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getTypeAssignment_1()); }
(rule__LoopSentence__TypeAssignment_1)
{ after(grammarAccess.getLoopSentenceAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopSentence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group__2__Impl
	rule__LoopSentence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_2()); }

	'<-' 

{ after(grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopSentence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group__3__Impl
	rule__LoopSentence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getOAssignment_3()); }
(rule__LoopSentence__OAssignment_3)
{ after(grammarAccess.getLoopSentenceAccess().getOAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopSentence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getGroup_4()); }
(rule__LoopSentence__Group_4__0)?
{ after(grammarAccess.getLoopSentenceAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LoopSentence__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group_4__0__Impl
	rule__LoopSentence__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_4_0()); }

	'<-' 

{ after(grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopSentence__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopSentence__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getIAssignment_4_1()); }
(rule__LoopSentence__IAssignment_4_1)
{ after(grammarAccess.getLoopSentenceAccess().getIAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LoopFor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopFor__Group__0__Impl
	rule__LoopFor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopFor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopForAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getLoopForAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LoopFor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LoopFor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopFor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopForAccess().getSequenceLiteralParserRuleCall_1()); }
	ruleSequenceLiteral
{ after(grammarAccess.getLoopForAccess().getSequenceLiteralParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Factory__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factory__Group__0__Impl
	rule__Factory__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getFactoryKeyword_0()); }

	'factory' 

{ after(grammarAccess.getFactoryAccess().getFactoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factory__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factory__Group__1__Impl
	rule__Factory__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getNameAssignment_1()); }
(rule__Factory__NameAssignment_1)
{ after(grammarAccess.getFactoryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Factory__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Factory__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getTypeAssignment_2()); }
(rule__Factory__TypeAssignment_2)
{ after(grammarAccess.getFactoryAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__File__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getFileKeyword_0()); }

	'file' 

{ after(grammarAccess.getFileAccess().getFileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__File__Group__1__Impl
	rule__File__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getNameAssignment_1()); }
(rule__File__NameAssignment_1)
{ after(grammarAccess.getFileAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__File__Group__2__Impl
	rule__File__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getAlternatives_2()); }
(rule__File__Alternatives_2)
{ after(grammarAccess.getFileAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__File__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__File__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getPathAssignment_3()); }
(rule__File__PathAssignment_3)
{ after(grammarAccess.getFileAccess().getPathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Canvas__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__0__Impl
	rule__Canvas__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getCanvasKeyword_0()); }

	'canvas' 

{ after(grammarAccess.getCanvasAccess().getCanvasKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__1__Impl
	rule__Canvas__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getNameAssignment_1()); }
(rule__Canvas__NameAssignment_1)
{ after(grammarAccess.getCanvasAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__2__Impl
	rule__Canvas__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getCanvasAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__3__Impl
	rule__Canvas__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getGroup_3()); }
(rule__Canvas__Group_3__0)*
{ after(grammarAccess.getCanvasAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Canvas__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group_3__0__Impl
	rule__Canvas__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getPropertiesAssignment_3_0()); }
(rule__Canvas__PropertiesAssignment_3_0)
{ after(grammarAccess.getCanvasAccess().getPropertiesAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Canvas__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Canvas__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getSemicolonKeyword_3_1()); }

	';' 

{ after(grammarAccess.getCanvasAccess().getSemicolonKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Module__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_1_0()); }
	RULE_ID{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__InputtypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getInputtypeTypeRefParserRuleCall_2_1_0()); }
	ruleTypeRef{ after(grammarAccess.getModuleAccess().getInputtypeTypeRefParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__OutputtypeAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getOutputtypeTypeRefParserRuleCall_3_1_0()); }
	ruleTypeRef{ after(grammarAccess.getModuleAccess().getOutputtypeTypeRefParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__AuthorAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getAuthorSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getModuleAccess().getAuthorSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__CreationAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getCreationSTRINGTerminalRuleCall_5_1_0()); }
	RULE_STRING{ after(grammarAccess.getModuleAccess().getCreationSTRINGTerminalRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__LinkAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getLinkSTRINGTerminalRuleCall_6_1_0()); }
	RULE_STRING{ after(grammarAccess.getModuleAccess().getLinkSTRINGTerminalRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ImportsAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getImportsImportParserRuleCall_7_0()); }
	ruleImport{ after(grammarAccess.getModuleAccess().getImportsImportParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__SentencesAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getSentencesSentenceParserRuleCall_8_0()); }
	ruleSentence{ after(grammarAccess.getModuleAccess().getSentencesSentenceParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportURIAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSwitchAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__TestAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getTestLiteralExpressionParserRuleCall_2_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSwitchAccess().getTestLiteralExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__AAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getALiteralExpressionParserRuleCall_4_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSwitchAccess().getALiteralExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__BAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchAccess().getBLiteralExpressionParserRuleCall_6_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSwitchAccess().getBLiteralExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getOpBinOpEnumRuleCall_1_1_0()); }
	ruleBinOp{ after(grammarAccess.getLiteralExpressionBinAccess().getOpBinOpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionBin__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionBinAccess().getRightLiteralExpressionBinParserRuleCall_1_2_0()); }
	ruleLiteralExpressionBin{ after(grammarAccess.getLiteralExpressionBinAccess().getRightLiteralExpressionBinParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getOpCompOpEnumRuleCall_1_1_0()); }
	ruleCompOp{ after(grammarAccess.getLiteralExpressionCompAccess().getOpCompOpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionComp__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionCompAccess().getRightLiteralExpressionCompParserRuleCall_1_2_0()); }
	ruleLiteralExpressionComp{ after(grammarAccess.getLiteralExpressionCompAccess().getRightLiteralExpressionCompParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getOpAddOpEnumRuleCall_1_1_0()); }
	ruleAddOp{ after(grammarAccess.getLiteralExpressionAddAccess().getOpAddOpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionAdd__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionAddAccess().getRightLiteralExpressionAddParserRuleCall_1_2_0()); }
	ruleLiteralExpressionAdd{ after(grammarAccess.getLiteralExpressionAddAccess().getRightLiteralExpressionAddParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getOpMultiOpEnumRuleCall_1_1_0()); }
	ruleMultiOp{ after(grammarAccess.getLiteralExpressionMultiAccess().getOpMultiOpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionMulti__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionMultiAccess().getRightLiteralExpressionMultiParserRuleCall_1_2_0()); }
	ruleLiteralExpressionMulti{ after(grammarAccess.getLiteralExpressionMultiAccess().getRightLiteralExpressionMultiParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getOpExpOpEnumRuleCall_1_1_0()); }
	ruleExpOp{ after(grammarAccess.getLiteralExpressionExpAccess().getOpExpOpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionExp__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionExpAccess().getRightLiteralExpressionExpParserRuleCall_1_2_0()); }
	ruleLiteralExpressionExp{ after(grammarAccess.getLiteralExpressionExpAccess().getRightLiteralExpressionExpParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__OpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getOpAlternatives_0_1_0()); }
(rule__LiteralExpressionSigned__OpAlternatives_0_1_0)
{ after(grammarAccess.getLiteralExpressionSignedAccess().getOpAlternatives_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpressionSigned__RightAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralExpressionSignedAccess().getRightLiteralExpressionTerminalParserRuleCall_0_2_0()); }
	ruleLiteralExpressionTerminal{ after(grammarAccess.getLiteralExpressionSignedAccess().getRightLiteralExpressionTerminalParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ConstantRef__ConstantrefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantRefAccess().getConstantrefConstantCrossReference_0()); }
(
{ before(grammarAccess.getConstantRefAccess().getConstantrefConstantIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getConstantRefAccess().getConstantrefConstantIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getConstantRefAccess().getConstantrefConstantCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SingleLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingleLiteralAccess().getValueSingleLiteralDTParserRuleCall_0()); }
	ruleSingleLiteralDT{ after(grammarAccess.getSingleLiteralAccess().getValueSingleLiteralDTParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__InitAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getInitLiteralExpressionParserRuleCall_1_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSequenceLiteralSerieAccess().getInitLiteralExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__EndAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getEndLiteralExpressionParserRuleCall_3_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSequenceLiteralSerieAccess().getEndLiteralExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralSerie__IncAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralSerieAccess().getIncLiteralExpressionParserRuleCall_4_1_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSequenceLiteralSerieAccess().getIncLiteralExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__ItemsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_0_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceLiteralPlain__ItemsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_1_1_0()); }
	ruleLiteralExpression{ after(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__ItemsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_0_0()); }
	ruleTupleItem{ after(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleLiteral__ItemsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_1_1_0()); }
	ruleTupleItem{ after(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleItem__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleItemAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTupleItemAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleItem__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleItemAccess().getValueLiteralExpressionParserRuleCall_2_0()); }
	ruleLiteralExpression{ after(grammarAccess.getTupleItemAccess().getValueLiteralExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__SentencesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getSentencesSentenceParserRuleCall_3_0()); }
	ruleSentence{ after(grammarAccess.getBlockAccess().getSentencesSentenceParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Noop__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoopAccess().getNameNoopKeyword_1_0()); }
(
{ before(grammarAccess.getNoopAccess().getNameNoopKeyword_1_0()); }

	'noop' 

{ after(grammarAccess.getNoopAccess().getNameNoopKeyword_1_0()); }
)

{ after(grammarAccess.getNoopAccess().getNameNoopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getPairAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getConstantAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getValueLiteralExpressionParserRuleCall_4_0()); }
	ruleLiteralExpression{ after(grammarAccess.getConstantAccess().getValueLiteralExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMultiAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__OpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getOpMultiOpEnumRuleCall_3_0()); }
	ruleMultiOp{ after(grammarAccess.getMultiAccess().getOpMultiOpEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__FactorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getFactorINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getMultiAccess().getFactorINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multi__ParentAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiAccess().getParentMultiCrossReference_5_0()); }
(
{ before(grammarAccess.getMultiAccess().getParentMultiIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getMultiAccess().getParentMultiIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getMultiAccess().getParentMultiCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDUnitAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__OpAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getOpMultiOpEnumRuleCall_3_0()); }
	ruleMultiOp{ after(grammarAccess.getDUnitAccess().getOpMultiOpEnumRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__FactorAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getFactorINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getDUnitAccess().getFactorINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__MultiAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getMultiMultiCrossReference_5_0()); }
(
{ before(grammarAccess.getDUnitAccess().getMultiMultiIDTerminalRuleCall_5_0_1()); }
	RULE_ID{ after(grammarAccess.getDUnitAccess().getMultiMultiIDTerminalRuleCall_5_0_1()); }
)
{ after(grammarAccess.getDUnitAccess().getMultiMultiCrossReference_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DUnit__ParentAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDUnitAccess().getParentUnitCrossReference_6_0()); }
(
{ before(grammarAccess.getDUnitAccess().getParentUnitIDTerminalRuleCall_6_0_1()); }
	RULE_ID{ after(grammarAccess.getDUnitAccess().getParentUnitIDTerminalRuleCall_6_0_1()); }
)
{ after(grammarAccess.getDUnitAccess().getParentUnitCrossReference_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NUnit__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUnitAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getNUnitAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NUnit__NumbertypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNUnitAccess().getNumbertypeNumberTypeEnumRuleCall_2_0()); }
	ruleNumberType{ after(grammarAccess.getNUnitAccess().getNumbertypeNumberTypeEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Box__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getBoxAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Box__MembersAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxAccess().getMembersMemberParserRuleCall_3_0()); }
	ruleMember{ after(grammarAccess.getBoxAccess().getMembersMemberParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Shape__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Member__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Member__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberAccess().getTypeTypeRefParserRuleCall_1_0()); }
	ruleTypeRef{ after(grammarAccess.getMemberAccess().getTypeTypeRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceTypeRef__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getSequenceTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__ItemsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_0_0()); }
	ruleTupleTypeRefItem{ after(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRef__ItemsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_1_1_0()); }
	ruleTupleTypeRefItem{ after(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRefItem__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getTupleTypeRefItemAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TupleTypeRefItem__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTupleTypeRefItemAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getTupleTypeRefItemAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SetTypeRef__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getSetTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VoidTypeRef__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidTypeRefAccess().getNameVoidKeyword_0()); }
(
{ before(grammarAccess.getVoidTypeRefAccess().getNameVoidKeyword_0()); }

	'void' 

{ after(grammarAccess.getVoidTypeRefAccess().getNameVoidKeyword_0()); }
)

{ after(grammarAccess.getVoidTypeRefAccess().getNameVoidKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__CollectionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getCollectionCollectionTypeEnumRuleCall_0_0()); }
	ruleCollectionType{ after(grammarAccess.getCollectionRefAccess().getCollectionCollectionTypeEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CollectionRef__TyperefAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCollectionRefAccess().getTyperefTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getCollectionRefAccess().getTyperefTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnitRef__UnittypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnitRefAccess().getUnittypeUnitCrossReference_1_0()); }
(
{ before(grammarAccess.getUnitRefAccess().getUnittypeUnitIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getUnitRefAccess().getUnittypeUnitIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getUnitRefAccess().getUnittypeUnitCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoxRef__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoxRefAccess().getRefBoxCrossReference_1_0()); }
(
{ before(grammarAccess.getBoxRefAccess().getRefBoxIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBoxRefAccess().getRefBoxIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getBoxRefAccess().getRefBoxCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAliasRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasRefAccess().getRefTypeAliasCrossReference_0()); }
(
{ before(grammarAccess.getTypeAliasRefAccess().getRefTypeAliasIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getTypeAliasRefAccess().getRefTypeAliasIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getTypeAliasRefAccess().getRefTypeAliasCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AuxTypeRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAuxTypeRefAccess().getRefAuxTypeEnumRuleCall_0()); }
	ruleAuxType{ after(grammarAccess.getAuxTypeRefAccess().getRefAuxTypeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ShapeRef__RefAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getShapeRefAccess().getRefShapeCrossReference_1_0()); }
(
{ before(grammarAccess.getShapeRefAccess().getRefShapeIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getShapeRefAccess().getRefShapeIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getShapeRefAccess().getRefShapeCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTypeRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberTypeRefAccess().getRefNumberTypeEnumRuleCall_0()); }
	ruleNumberType{ after(grammarAccess.getNumberTypeRefAccess().getRefNumberTypeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VisualTypeRef__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVisualTypeRefAccess().getRefVisualTypeEnumRuleCall_0()); }
	ruleVisualType{ after(grammarAccess.getVisualTypeRefAccess().getRefVisualTypeEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAlias__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeAliasAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeAlias__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAliasAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getTypeAliasAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getNameStreamKeyword_0_0()); }
(
{ before(grammarAccess.getStreamAccess().getNameStreamKeyword_0_0()); }

	'stream' 

{ after(grammarAccess.getStreamAccess().getNameStreamKeyword_0_0()); }
)

{ after(grammarAccess.getStreamAccess().getNameStreamKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__LeftAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getLeftLStreamValueParserRuleCall_1_0()); }
	ruleLStreamValue{ after(grammarAccess.getStreamAccess().getLeftLStreamValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Stream__RightAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStreamAccess().getRightRStreamValueParserRuleCall_3_0()); }
	ruleRStreamValue{ after(grammarAccess.getStreamAccess().getRightRStreamValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__ModuleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getModuleIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getInvokationAccess().getModuleIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getInvokationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Invokation__SentencesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationAccess().getSentencesInvokationParamParserRuleCall_3_0()); }
	ruleInvokationParam{ after(grammarAccess.getInvokationAccess().getSentencesInvokationParamParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InvokationParam__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationParamAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getInvokationParamAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InvokationParam__SourceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInvokationParamAccess().getSourceLiteralExpressionParserRuleCall_2_0()); }
	ruleLiteralExpression{ after(grammarAccess.getInvokationParamAccess().getSourceLiteralExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ItAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getItLoopForParserRuleCall_1_0()); }
	ruleLoopFor{ after(grammarAccess.getLoopAccess().getItLoopForParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getLoopAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__SentencesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopAccess().getSentencesLoopSentenceParserRuleCall_4_0()); }
	ruleLoopSentence{ after(grammarAccess.getLoopAccess().getSentencesLoopSentenceParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getLoopSentenceAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getTypeTypeRefParserRuleCall_1_0()); }
	ruleTypeRef{ after(grammarAccess.getLoopSentenceAccess().getTypeTypeRefParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__OAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getOLiteralExpressionParserRuleCall_3_0()); }
	ruleLiteralExpression{ after(grammarAccess.getLoopSentenceAccess().getOLiteralExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LoopSentence__IAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLoopSentenceAccess().getILiteralExpressionParserRuleCall_4_1_0()); }
	ruleLiteralExpression{ after(grammarAccess.getLoopSentenceAccess().getILiteralExpressionParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFactoryAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Factory__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFactoryAccess().getTypeTypeRefParserRuleCall_2_0()); }
	ruleTypeRef{ after(grammarAccess.getFactoryAccess().getTypeTypeRefParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__File__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__File__IsinputAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getIsinputLessThanSignHyphenMinusKeyword_2_0_0()); }
(
{ before(grammarAccess.getFileAccess().getIsinputLessThanSignHyphenMinusKeyword_2_0_0()); }

	'<-' 

{ after(grammarAccess.getFileAccess().getIsinputLessThanSignHyphenMinusKeyword_2_0_0()); }
)

{ after(grammarAccess.getFileAccess().getIsinputLessThanSignHyphenMinusKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__File__PathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFileAccess().getPathSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getFileAccess().getPathSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCanvasAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Canvas__PropertiesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCanvasAccess().getPropertiesPairParserRuleCall_3_0_0()); }
	rulePair{ after(grammarAccess.getCanvasAccess().getPropertiesPairParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_OCT : ('0'..'7')+ 'o';

RULE_HEX : '0x' ('0'..'9'|'A'..'F'|'a'..'f')+;

RULE_BIN : ('0'..'1')+ 'b';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


