/*
* generated by Xtext
*/
grammar InternalVML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.visualligence.g.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.visualligence.g.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.visualligence.g.services.VMLGrammarAccess;

}

@parser::members {

 	private VMLGrammarAccess grammarAccess;
 	
    public InternalVMLParser(TokenStream input, VMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected VMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleAccess().getModuleAction_0(),
            $current);
    }
)(	otherlv_1='types' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getTypesKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getTypesTypeDeclParserRuleCall_1_1_0()); 
	    }
		lv_types_2_0=ruleTypeDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_2_0, 
        		"TypeDecl");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_3='input' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getInputKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getInputInputParserRuleCall_2_1_0()); 
	    }
		lv_input_4_0=ruleInput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"input",
        		lv_input_4_0, 
        		"Input");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5='output' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getOutputKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getOutputOutputParserRuleCall_3_1_0()); 
	    }
		lv_output_6_0=ruleOutput		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"output",
        		lv_output_6_0, 
        		"Output");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTypeDecl
entryRuleTypeDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclRule()); }
	 iv_ruleTypeDecl=ruleTypeDecl 
	 { $current=$iv_ruleTypeDecl.current; } 
	 EOF 
;

// Rule TypeDecl
ruleTypeDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeDeclAccess().getTypeKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getTypeDeclAccess().getHashParserRuleCall_1()); 
    }
    this_Hash_1=ruleHash
    { 
        $current = $this_Hash_1.current; 
        afterParserOrEnumRuleCall();
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getTypeDeclAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleHash
entryRuleHash returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHashRule()); }
	 iv_ruleHash=ruleHash 
	 { $current=$iv_ruleHash.current; } 
	 EOF 
;

// Rule Hash
ruleHash returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHashAccess().getHashAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHashAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_0_0()); 
	    }
		lv_items_2_0=ruleHashItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"HashItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHashAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHashAccess().getItemsHashItemParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleHashItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHashRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"HashItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHashAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleHashItem
entryRuleHashItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHashItemRule()); }
	 iv_ruleHashItem=ruleHashItem 
	 { $current=$iv_ruleHashItem.current; } 
	 EOF 
;

// Rule HashItem
ruleHashItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getHashItemAccess().getHashItemAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getHashItemAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHashItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getHashItemAccess().getColonKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getHashItemRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getHashItemAccess().getTypeTypeDeclCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	 iv_ruleInput=ruleInput 
	 { $current=$iv_ruleInput.current; } 
	 EOF 
;

// Rule Input
ruleInput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInputAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getInputAccess().getTypeTypeDeclCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	 iv_ruleOutput=ruleOutput 
	 { $current=$iv_ruleOutput.current; } 
	 EOF 
;

// Rule Output
ruleOutput returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOutputAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getOutputAccess().getTypeTypeDeclCrossReference_2_0()); 
	}

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


