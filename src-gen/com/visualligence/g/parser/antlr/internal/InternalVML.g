/*
* generated by Xtext
*/
grammar InternalVML;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.visualligence.g.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.visualligence.g.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.visualligence.g.services.VMLGrammarAccess;

}

@parser::members {

 	private VMLGrammarAccess grammarAccess;
 	
    public InternalVMLParser(TokenStream input, VMLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected VMLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModuleAccess().getModuleAction_0(),
            $current);
    }
)(	otherlv_1='module' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleAccess().getModuleKeyword_1_0());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))?(	otherlv_3='input' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleAccess().getInputKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getInputtypeTypeRefParserRuleCall_2_1_0()); 
	    }
		lv_inputtype_4_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"inputtype",
        		lv_inputtype_4_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='output' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getOutputKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getOutputtypeTypeRefParserRuleCall_3_1_0()); 
	    }
		lv_outputtype_6_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"outputtype",
        		lv_outputtype_6_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_7='author' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModuleAccess().getAuthorKeyword_4_0());
    }
(
(
		lv_author_8_0=RULE_STRING
		{
			newLeafNode(lv_author_8_0, grammarAccess.getModuleAccess().getAuthorSTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"author",
        		lv_author_8_0, 
        		"STRING");
	    }

)
))?(	otherlv_9='creation' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModuleAccess().getCreationKeyword_5_0());
    }
(
(
		lv_creation_10_0=RULE_STRING
		{
			newLeafNode(lv_creation_10_0, grammarAccess.getModuleAccess().getCreationSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"creation",
        		lv_creation_10_0, 
        		"STRING");
	    }

)
))?(	otherlv_11='more' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getModuleAccess().getMoreKeyword_6_0());
    }
(
(
		lv_link_12_0=RULE_STRING
		{
			newLeafNode(lv_link_12_0, grammarAccess.getModuleAccess().getLinkSTRINGTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"link",
        		lv_link_12_0, 
        		"STRING");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getImportsImportParserRuleCall_7_0()); 
	    }
		lv_imports_13_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_13_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getSentencesSentenceParserRuleCall_8_0()); 
	    }
		lv_sentences_14_0=ruleSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_14_0, 
        		"Sentence");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	 iv_ruleSentence=ruleSentence 
	 { $current=$iv_ruleSentence.current; } 
	 EOF 
;

// Rule Sentence
ruleSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getMultiParserRuleCall_0()); 
    }
    this_Multi_0=ruleMulti
    { 
        $current = $this_Multi_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getUnitParserRuleCall_1()); 
    }
    this_Unit_1=ruleUnit
    { 
        $current = $this_Unit_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getBoxParserRuleCall_2()); 
    }
    this_Box_2=ruleBox
    { 
        $current = $this_Box_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getConstantParserRuleCall_3()); 
    }
    this_Constant_3=ruleConstant
    { 
        $current = $this_Constant_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getShapeParserRuleCall_4()); 
    }
    this_Shape_4=ruleShape
    { 
        $current = $this_Shape_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getTypeAliasParserRuleCall_5()); 
    }
    this_TypeAlias_5=ruleTypeAlias
    { 
        $current = $this_TypeAlias_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getNodeParserRuleCall_6()); 
    }
    this_Node_6=ruleNode
    { 
        $current = $this_Node_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getStreamParserRuleCall_7()); 
    }
    this_Stream_7=ruleStream
    { 
        $current = $this_Stream_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getCanvasParserRuleCall_8()); 
    }
    this_Canvas_8=ruleCanvas
    { 
        $current = $this_Canvas_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getBlockParserRuleCall_9()); 
    }
    this_Block_9=ruleBlock
    { 
        $current = $this_Block_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSentenceAccess().getNoopParserRuleCall_10()); 
    }
    this_Noop_10=ruleNoop
    { 
        $current = $this_Noop_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	 iv_ruleNode=ruleNode 
	 { $current=$iv_ruleNode.current; } 
	 EOF 
;

// Rule Node
ruleNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getInvokationParserRuleCall_0()); 
    }
    this_Invokation_0=ruleInvokation
    { 
        $current = $this_Invokation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getFactoryParserRuleCall_1()); 
    }
    this_Factory_1=ruleFactory
    { 
        $current = $this_Factory_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getLoopParserRuleCall_2()); 
    }
    this_Loop_2=ruleLoop
    { 
        $current = $this_Loop_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getSwitchParserRuleCall_3()); 
    }
    this_Switch_3=ruleSwitch
    { 
        $current = $this_Switch_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNodeAccess().getFileParserRuleCall_4()); 
    }
    this_File_4=ruleFile
    { 
        $current = $this_File_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	 iv_ruleSwitch=ruleSwitch 
	 { $current=$iv_ruleSwitch.current; } 
	 EOF 
;

// Rule Switch
ruleSwitch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchAccess().getSwitchKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSwitchAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSwitchRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getTestLiteralExpressionParserRuleCall_2_0()); 
	    }
		lv_test_2_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_2_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='?' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchAccess().getQuestionMarkKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getALiteralExpressionParserRuleCall_4_0()); 
	    }
		lv_a_4_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_4_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchAccess().getBLiteralExpressionParserRuleCall_6_0()); 
	    }
		lv_b_6_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchRule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_6_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteralExpressionBinParserRuleCall()); 
    }
    this_LiteralExpressionBin_0=ruleLiteralExpressionBin
    { 
        $current = $this_LiteralExpressionBin_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLiteralExpressionBin
entryRuleLiteralExpressionBin returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionBinRule()); }
	 iv_ruleLiteralExpressionBin=ruleLiteralExpressionBin 
	 { $current=$iv_ruleLiteralExpressionBin.current; } 
	 EOF 
;

// Rule LiteralExpressionBin
ruleLiteralExpressionBin returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionBinAccess().getLiteralExpressionCompParserRuleCall_0()); 
    }
    this_LiteralExpressionComp_0=ruleLiteralExpressionComp
    { 
        $current = $this_LiteralExpressionComp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionBinAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionBinAccess().getOpBinOpEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleBinOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionBinRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"BinOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionBinAccess().getRightLiteralExpressionBinParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpressionBin		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionBinRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpressionBin");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionComp
entryRuleLiteralExpressionComp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionCompRule()); }
	 iv_ruleLiteralExpressionComp=ruleLiteralExpressionComp 
	 { $current=$iv_ruleLiteralExpressionComp.current; } 
	 EOF 
;

// Rule LiteralExpressionComp
ruleLiteralExpressionComp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionCompAccess().getLiteralExpressionAddParserRuleCall_0()); 
    }
    this_LiteralExpressionAdd_0=ruleLiteralExpressionAdd
    { 
        $current = $this_LiteralExpressionAdd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionCompAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionCompAccess().getOpCompOpEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleCompOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionCompRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"CompOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionCompAccess().getRightLiteralExpressionCompParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpressionComp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionCompRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpressionComp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionAdd
entryRuleLiteralExpressionAdd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionAddRule()); }
	 iv_ruleLiteralExpressionAdd=ruleLiteralExpressionAdd 
	 { $current=$iv_ruleLiteralExpressionAdd.current; } 
	 EOF 
;

// Rule LiteralExpressionAdd
ruleLiteralExpressionAdd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionAddAccess().getLiteralExpressionMultiParserRuleCall_0()); 
    }
    this_LiteralExpressionMulti_0=ruleLiteralExpressionMulti
    { 
        $current = $this_LiteralExpressionMulti_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionAddAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAddAccess().getOpAddOpEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleAddOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionAddRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"AddOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAddAccess().getRightLiteralExpressionAddParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpressionAdd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionAddRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpressionAdd");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionMulti
entryRuleLiteralExpressionMulti returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionMultiRule()); }
	 iv_ruleLiteralExpressionMulti=ruleLiteralExpressionMulti 
	 { $current=$iv_ruleLiteralExpressionMulti.current; } 
	 EOF 
;

// Rule LiteralExpressionMulti
ruleLiteralExpressionMulti returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionMultiAccess().getLiteralExpressionExpParserRuleCall_0()); 
    }
    this_LiteralExpressionExp_0=ruleLiteralExpressionExp
    { 
        $current = $this_LiteralExpressionExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionMultiAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionMultiAccess().getOpMultiOpEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleMultiOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionMultiRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"MultiOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionMultiAccess().getRightLiteralExpressionMultiParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpressionMulti		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionMultiRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpressionMulti");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionExp
entryRuleLiteralExpressionExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionExpRule()); }
	 iv_ruleLiteralExpressionExp=ruleLiteralExpressionExp 
	 { $current=$iv_ruleLiteralExpressionExp.current; } 
	 EOF 
;

// Rule LiteralExpressionExp
ruleLiteralExpressionExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionExpAccess().getLiteralExpressionSignedParserRuleCall_0()); 
    }
    this_LiteralExpressionSigned_0=ruleLiteralExpressionSigned
    { 
        $current = $this_LiteralExpressionSigned_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLiteralExpressionExpAccess().getOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionExpAccess().getOpExpOpEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleExpOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionExpRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ExpOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionExpAccess().getRightLiteralExpressionExpParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLiteralExpressionExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LiteralExpressionExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLiteralExpressionSigned
entryRuleLiteralExpressionSigned returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionSignedRule()); }
	 iv_ruleLiteralExpressionSigned=ruleLiteralExpressionSigned 
	 { $current=$iv_ruleLiteralExpressionSigned.current; } 
	 EOF 
;

// Rule LiteralExpressionSigned
ruleLiteralExpressionSigned returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLiteralExpressionSignedAccess().getUnaryOperationAction_0_0(),
            $current);
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionSignedAccess().getOpAddOpEnumRuleCall_0_1_0_0()); 
	    }
		lv_op_1_1=ruleAddOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionSignedRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_1, 
        		"AddOp");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionSignedAccess().getOpNegationOpEnumRuleCall_0_1_0_1()); 
	    }
		lv_op_1_2=ruleNegationOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionSignedRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_2, 
        		"NegationOp");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionSignedAccess().getRightLiteralExpressionTerminalParserRuleCall_0_2_0()); 
	    }
		lv_right_2_0=ruleLiteralExpressionTerminal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionSignedRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"LiteralExpressionTerminal");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionSignedAccess().getLiteralExpressionTerminalParserRuleCall_1()); 
    }
    this_LiteralExpressionTerminal_3=ruleLiteralExpressionTerminal
    { 
        $current = $this_LiteralExpressionTerminal_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralExpressionTerminal
entryRuleLiteralExpressionTerminal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionTerminalRule()); }
	 iv_ruleLiteralExpressionTerminal=ruleLiteralExpressionTerminal 
	 { $current=$iv_ruleLiteralExpressionTerminal.current; } 
	 EOF 
;

// Rule LiteralExpressionTerminal
ruleLiteralExpressionTerminal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLiteralExpressionTerminalAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getLiteralExpressionTerminalAccess().getLiteralExpressionParserRuleCall_0_1()); 
    }
    this_LiteralExpression_1=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLiteralExpressionTerminalAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLiteralExpressionTerminalAccess().getRValueParserRuleCall_1()); 
    }
    this_RValue_3=ruleRValue
    { 
        $current = $this_RValue_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRValue
entryRuleRValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRValueRule()); }
	 iv_ruleRValue=ruleRValue 
	 { $current=$iv_ruleRValue.current; } 
	 EOF 
;

// Rule RValue
ruleRValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getSingleLiteralParserRuleCall_0()); 
    }
    this_SingleLiteral_0=ruleSingleLiteral
    { 
        $current = $this_SingleLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getSequenceLiteralParserRuleCall_1()); 
    }
    this_SequenceLiteral_1=ruleSequenceLiteral
    { 
        $current = $this_SequenceLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getTupleLiteralParserRuleCall_2()); 
    }
    this_TupleLiteral_2=ruleTupleLiteral
    { 
        $current = $this_TupleLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getSetLiteralParserRuleCall_3()); 
    }
    this_SetLiteral_3=ruleSetLiteral
    { 
        $current = $this_SetLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRValueAccess().getConstantRefParserRuleCall_4()); 
    }
    this_ConstantRef_4=ruleConstantRef
    { 
        $current = $this_ConstantRef_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;









// Entry rule entryRuleConstantRef
entryRuleConstantRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRefRule()); }
	 iv_ruleConstantRef=ruleConstantRef 
	 { $current=$iv_ruleConstantRef.current; } 
	 EOF 
;

// Rule ConstantRef
ruleConstantRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getConstantRefAccess().getConstantrefConstantCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleSingleLiteral
entryRuleSingleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleLiteralRule()); }
	 iv_ruleSingleLiteral=ruleSingleLiteral 
	 { $current=$iv_ruleSingleLiteral.current; } 
	 EOF 
;

// Rule SingleLiteral
ruleSingleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleLiteralAccess().getValueSingleLiteralDTParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSingleLiteralDT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SingleLiteralDT");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSingleLiteralDT
entryRuleSingleLiteralDT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleLiteralDTRule()); } 
	 iv_ruleSingleLiteralDT=ruleSingleLiteralDT 
	 { $current=$iv_ruleSingleLiteralDT.current.getText(); }  
	 EOF 
;

// Rule SingleLiteralDT
ruleSingleLiteralDT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSingleLiteralDTAccess().getBoolLiteralParserRuleCall_0()); 
    }
    this_BoolLiteral_0=ruleBoolLiteral    {
		$current.merge(this_BoolLiteral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSingleLiteralDTAccess().getNumberLiteralParserRuleCall_1()); 
    }
    this_NumberLiteral_1=ruleNumberLiteral    {
		$current.merge(this_NumberLiteral_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSingleLiteralDTAccess().getStringLiteralParserRuleCall_2()); 
    }
    this_StringLiteral_2=ruleStringLiteral    {
		$current.merge(this_StringLiteral_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); } 
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current.getText(); }  
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); } 
	 iv_ruleNumberLiteral=ruleNumberLiteral 
	 { $current=$iv_ruleNumberLiteral.current.getText(); }  
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberLiteralAccess().getIntegerParserRuleCall_0()); 
    }
    this_Integer_0=ruleInteger    {
		$current.merge(this_Integer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberLiteralAccess().getFloatParserRuleCall_1()); 
    }
    this_Float_1=ruleFloat    {
		$current.merge(this_Float_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberLiteralAccess().getSNotationParserRuleCall_2()); 
    }
    this_SNotation_2=ruleSNotation    {
		$current.merge(this_SNotation_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberLiteralAccess().getImaginaryParserRuleCall_3()); 
    }
    this_Imaginary_3=ruleImaginary    {
		$current.merge(this_Imaginary_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerRule()); } 
	 iv_ruleInteger=ruleInteger 
	 { $current=$iv_ruleInteger.current.getText(); }  
	 EOF 
;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_OCT_1=RULE_OCT    {
		$current.merge(this_OCT_1);
    }

    { 
    newLeafNode(this_OCT_1, grammarAccess.getIntegerAccess().getOCTTerminalRuleCall_1()); 
    }

    |    this_HEX_2=RULE_HEX    {
		$current.merge(this_HEX_2);
    }

    { 
    newLeafNode(this_HEX_2, grammarAccess.getIntegerAccess().getHEXTerminalRuleCall_2()); 
    }

    |    this_BIN_3=RULE_BIN    {
		$current.merge(this_BIN_3);
    }

    { 
    newLeafNode(this_BIN_3, grammarAccess.getIntegerAccess().getBINTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleFloat
entryRuleFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatRule()); } 
	 iv_ruleFloat=ruleFloat 
	 { $current=$iv_ruleFloat.current.getText(); }  
	 EOF 
;

// Rule Float
ruleFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_0_1()); 
    }
(    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getFloatAccess().getINTTerminalRuleCall_0_2()); 
    }
)?)
    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getFloatAccess().getINTTerminalRuleCall_1_1()); 
    }
))
    ;





// Entry rule entryRuleSNotation
entryRuleSNotation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSNotationRule()); } 
	 iv_ruleSNotation=ruleSNotation 
	 { $current=$iv_ruleSNotation.current.getText(); }  
	 EOF 
;

// Rule SNotation
ruleSNotation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getSNotationAccess().getINTTerminalRuleCall_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getSNotationAccess().getFloatParserRuleCall_0_1()); 
    }
    this_Float_1=ruleFloat    {
		$current.merge(this_Float_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    { 
        newCompositeNode(grammarAccess.getSNotationAccess().getExpConstantParserRuleCall_1()); 
    }
    this_ExpConstant_2=ruleExpConstant    {
		$current.merge(this_ExpConstant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getSNotationAccess().getSignParserRuleCall_2()); 
    }
    this_Sign_3=ruleSign    {
		$current.merge(this_Sign_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getSNotationAccess().getINTTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleExpConstant
entryRuleExpConstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpConstantRule()); } 
	 iv_ruleExpConstant=ruleExpConstant 
	 { $current=$iv_ruleExpConstant.current.getText(); }  
	 EOF 
;

// Rule ExpConstant
ruleExpConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpConstantAccess().getEKeyword_0()); 
    }

    |
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpConstantAccess().getEKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSign
entryRuleSign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignRule()); } 
	 iv_ruleSign=ruleSign 
	 { $current=$iv_ruleSign.current.getText(); }  
	 EOF 
;

// Rule Sign
ruleSign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleImaginary
entryRuleImaginary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImaginaryRule()); } 
	 iv_ruleImaginary=ruleImaginary 
	 { $current=$iv_ruleImaginary.current.getText(); }  
	 EOF 
;

// Rule Imaginary
ruleImaginary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getImaginaryAccess().getINTTerminalRuleCall_0_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getImaginaryAccess().getFloatParserRuleCall_0_1()); 
    }
    this_Float_1=ruleFloat    {
		$current.merge(this_Float_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getImaginaryAccess().getImaginaryConstantParserRuleCall_1()); 
    }
    this_ImaginaryConstant_2=ruleImaginaryConstant    {
		$current.merge(this_ImaginaryConstant_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleImaginaryConstant
entryRuleImaginaryConstant returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImaginaryConstantRule()); } 
	 iv_ruleImaginaryConstant=ruleImaginaryConstant 
	 { $current=$iv_ruleImaginaryConstant.current.getText(); }  
	 EOF 
;

// Rule ImaginaryConstant
ruleImaginaryConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='i' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImaginaryConstantAccess().getIKeyword_0()); 
    }

    |
	kw='j' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImaginaryConstantAccess().getJKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBoolLiteral
entryRuleBoolLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolLiteralRule()); } 
	 iv_ruleBoolLiteral=ruleBoolLiteral 
	 { $current=$iv_ruleBoolLiteral.current.getText(); }  
	 EOF 
;

// Rule BoolLiteral
ruleBoolLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBoolLiteralAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleSequenceLiteral
entryRuleSequenceLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceLiteralRule()); }
	 iv_ruleSequenceLiteral=ruleSequenceLiteral 
	 { $current=$iv_ruleSequenceLiteral.current; } 
	 EOF 
;

// Rule SequenceLiteral
ruleSequenceLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralPlainParserRuleCall_0()); 
    }
    this_SequenceLiteralPlain_0=ruleSequenceLiteralPlain
    { 
        $current = $this_SequenceLiteralPlain_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSequenceLiteralAccess().getSequenceLiteralSerieParserRuleCall_1()); 
    }
    this_SequenceLiteralSerie_1=ruleSequenceLiteralSerie
    { 
        $current = $this_SequenceLiteralSerie_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequenceLiteralSerie
entryRuleSequenceLiteralSerie returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceLiteralSerieRule()); }
	 iv_ruleSequenceLiteralSerie=ruleSequenceLiteralSerie 
	 { $current=$iv_ruleSequenceLiteralSerie.current; } 
	 EOF 
;

// Rule SequenceLiteralSerie
ruleSequenceLiteralSerie returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[..' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceLiteralSerieAccess().getLeftSquareBracketFullStopFullStopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceLiteralSerieAccess().getInitLiteralExpressionParserRuleCall_1_0()); 
	    }
		lv_init_1_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceLiteralSerieRule());
	        }
       		set(
       			$current, 
       			"init",
        		lv_init_1_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceLiteralSerieAccess().getHyphenMinusGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceLiteralSerieAccess().getEndLiteralExpressionParserRuleCall_3_0()); 
	    }
		lv_end_3_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceLiteralSerieRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceLiteralSerieAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceLiteralSerieAccess().getIncLiteralExpressionParserRuleCall_4_1_0()); 
	    }
		lv_inc_5_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceLiteralSerieRule());
	        }
       		set(
       			$current, 
       			"inc",
        		lv_inc_5_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSequenceLiteralSerieAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSequenceLiteralPlain
entryRuleSequenceLiteralPlain returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceLiteralPlainRule()); }
	 iv_ruleSequenceLiteralPlain=ruleSequenceLiteralPlain 
	 { $current=$iv_ruleSequenceLiteralPlain.current; } 
	 EOF 
;

// Rule SequenceLiteralPlain
ruleSequenceLiteralPlain returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSequenceLiteralPlainAccess().getSequenceLiteralPlainAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceLiteralPlainAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_0_0()); 
	    }
		lv_items_2_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceLiteralPlainRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceLiteralPlainAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceLiteralPlainAccess().getItemsLiteralExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceLiteralPlainRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSequenceLiteralPlainAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTupleLiteral
entryRuleTupleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleLiteralRule()); }
	 iv_ruleTupleLiteral=ruleTupleLiteral 
	 { $current=$iv_ruleTupleLiteral.current; } 
	 EOF 
;

// Rule TupleLiteral
ruleTupleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleLiteralAccess().getTupleLiteralAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleLiteralAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_0_0()); 
	    }
		lv_items_2_0=ruleTupleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"TupleItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleLiteralAccess().getItemsTupleItemParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleTupleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleLiteralRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"TupleItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleLiteralAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTupleItem
entryRuleTupleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleItemRule()); }
	 iv_ruleTupleItem=ruleTupleItem 
	 { $current=$iv_ruleTupleItem.current; } 
	 EOF 
;

// Rule TupleItem
ruleTupleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTupleItemAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTupleItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleItemAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleItemAccess().getValueLiteralExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleItemRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetLiteral
entryRuleSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetLiteralRule()); }
	 iv_ruleSetLiteral=ruleSetLiteral 
	 { $current=$iv_ruleSetLiteral.current; } 
	 EOF 
;

// Rule SetLiteral
ruleSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetLiteralAccess().getSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetLiteralAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getItemsLiteralExpressionParserRuleCall_2_0_0()); 
	    }
		lv_items_2_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetLiteralAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetLiteralAccess().getItemsLiteralExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetLiteralRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSetLiteralAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(	otherlv_2='~' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getTildeKeyword_2_0());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getBlockAccess().getNameIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBlockRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getSentencesSentenceParserRuleCall_3_0()); 
	    }
		lv_sentences_4_0=ruleSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_4_0, 
        		"Sentence");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleNoop
entryRuleNoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoopRule()); }
	 iv_ruleNoop=ruleNoop 
	 { $current=$iv_ruleNoop.current; } 
	 EOF 
;

// Rule Noop
ruleNoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNoopAccess().getNoopAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=	'noop' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getNoopAccess().getNameNoopKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoopRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "noop");
	    }

)
))
;





// Entry rule entryRulePair
entryRulePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	 iv_rulePair=rulePair 
	 { $current=$iv_rulePair.current; } 
	 EOF 
;

// Rule Pair
rulePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPairAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPairAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstantKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantAccess().getValueLiteralExpressionParserRuleCall_4_0()); 
	    }
		lv_value_4_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMulti
entryRuleMulti returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiRule()); }
	 iv_ruleMulti=ruleMulti 
	 { $current=$iv_ruleMulti.current; } 
	 EOF 
;

// Rule Multi
ruleMulti returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='multi' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMultiAccess().getMultiKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMultiAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiAccess().getOpMultiOpEnumRuleCall_3_0()); 
	    }
		lv_op_3_0=ruleMultiOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"MultiOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_factor_4_0=RULE_INT
		{
			newLeafNode(lv_factor_4_0, grammarAccess.getMultiAccess().getFactorINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"factor",
        		lv_factor_4_0, 
        		"INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getMultiAccess().getParentMultiCrossReference_5_0()); 
	}

)
)?)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getDUnitParserRuleCall_0()); 
    }
    this_DUnit_0=ruleDUnit
    { 
        $current = $this_DUnit_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getNUnitParserRuleCall_1()); 
    }
    this_NUnit_1=ruleNUnit
    { 
        $current = $this_NUnit_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDUnit
entryRuleDUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDUnitRule()); }
	 iv_ruleDUnit=ruleDUnit 
	 { $current=$iv_ruleDUnit.current; } 
	 EOF 
;

// Rule DUnit
ruleDUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDUnitAccess().getUnitKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDUnitAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDUnitAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDUnitAccess().getOpMultiOpEnumRuleCall_3_0()); 
	    }
		lv_op_3_0=ruleMultiOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDUnitRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"MultiOp");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_factor_4_0=RULE_INT
		{
			newLeafNode(lv_factor_4_0, grammarAccess.getDUnitAccess().getFactorINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"factor",
        		lv_factor_4_0, 
        		"INT");
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDUnitRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getDUnitAccess().getMultiMultiCrossReference_5_0()); 
	}

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDUnitRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getDUnitAccess().getParentUnitCrossReference_6_0()); 
	}

)
))
;





// Entry rule entryRuleNUnit
entryRuleNUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNUnitRule()); }
	 iv_ruleNUnit=ruleNUnit 
	 { $current=$iv_ruleNUnit.current; } 
	 EOF 
;

// Rule NUnit
ruleNUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNUnitAccess().getUnitKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getNUnitAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNUnitAccess().getNumbertypeNumberTypeEnumRuleCall_2_0()); 
	    }
		lv_numbertype_2_0=ruleNumberType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNUnitRule());
	        }
       		set(
       			$current, 
       			"numbertype",
        		lv_numbertype_2_0, 
        		"NumberType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBox
entryRuleBox returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoxRule()); }
	 iv_ruleBox=ruleBox 
	 { $current=$iv_ruleBox.current; } 
	 EOF 
;

// Rule Box
ruleBox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='box' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBoxAccess().getBoxKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getBoxAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoxAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBoxAccess().getMembersMemberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=ruleMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBoxRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"Member");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBoxAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleShape
entryRuleShape returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShapeRule()); }
	 iv_ruleShape=ruleShape 
	 { $current=$iv_ruleShape.current; } 
	 EOF 
;

// Rule Shape
ruleShape returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='shape' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShapeAccess().getShapeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getShapeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getShapeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleMember
entryRuleMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRule()); }
	 iv_ruleMember=ruleMember 
	 { $current=$iv_ruleMember.current; } 
	 EOF 
;

// Rule Member
ruleMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMemberAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberAccess().getTypeTypeRefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeRefAccess().getPlainTypeRefParserRuleCall_0()); 
    }
    this_PlainTypeRef_0=rulePlainTypeRef
    { 
        $current = $this_PlainTypeRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeRefAccess().getCompositeTypeRefParserRuleCall_1()); 
    }
    this_CompositeTypeRef_1=ruleCompositeTypeRef
    { 
        $current = $this_CompositeTypeRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePlainTypeRef
entryRulePlainTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlainTypeRefRule()); }
	 iv_rulePlainTypeRef=rulePlainTypeRef 
	 { $current=$iv_rulePlainTypeRef.current; } 
	 EOF 
;

// Rule PlainTypeRef
rulePlainTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getVoidTypeRefParserRuleCall_0()); 
    }
    this_VoidTypeRef_0=ruleVoidTypeRef
    { 
        $current = $this_VoidTypeRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getAutoTypeRefParserRuleCall_1()); 
    }
    this_AutoTypeRef_1=ruleAutoTypeRef
    { 
        $current = $this_AutoTypeRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getNumberTypeRefParserRuleCall_2()); 
    }
    this_NumberTypeRef_2=ruleNumberTypeRef
    { 
        $current = $this_NumberTypeRef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getVisualTypeRefParserRuleCall_3()); 
    }
    this_VisualTypeRef_3=ruleVisualTypeRef
    { 
        $current = $this_VisualTypeRef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getAuxTypeRefParserRuleCall_4()); 
    }
    this_AuxTypeRef_4=ruleAuxTypeRef
    { 
        $current = $this_AuxTypeRef_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getTypeAliasRefParserRuleCall_5()); 
    }
    this_TypeAliasRef_5=ruleTypeAliasRef
    { 
        $current = $this_TypeAliasRef_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getShapeRefParserRuleCall_6()); 
    }
    this_ShapeRef_6=ruleShapeRef
    { 
        $current = $this_ShapeRef_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getBoxRefParserRuleCall_7()); 
    }
    this_BoxRef_7=ruleBoxRef
    { 
        $current = $this_BoxRef_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getUnitRefParserRuleCall_8()); 
    }
    this_UnitRef_8=ruleUnitRef
    { 
        $current = $this_UnitRef_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPlainTypeRefAccess().getCollectionRefParserRuleCall_9()); 
    }
    this_CollectionRef_9=ruleCollectionRef
    { 
        $current = $this_CollectionRef_9.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCompositeTypeRef
entryRuleCompositeTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeTypeRefRule()); }
	 iv_ruleCompositeTypeRef=ruleCompositeTypeRef 
	 { $current=$iv_ruleCompositeTypeRef.current; } 
	 EOF 
;

// Rule CompositeTypeRef
ruleCompositeTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompositeTypeRefAccess().getSequenceTypeRefParserRuleCall_0()); 
    }
    this_SequenceTypeRef_0=ruleSequenceTypeRef
    { 
        $current = $this_SequenceTypeRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositeTypeRefAccess().getTupleTypeRefParserRuleCall_1()); 
    }
    this_TupleTypeRef_1=ruleTupleTypeRef
    { 
        $current = $this_TupleTypeRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompositeTypeRefAccess().getSetTypeRefParserRuleCall_2()); 
    }
    this_SetTypeRef_2=ruleSetTypeRef
    { 
        $current = $this_SetTypeRef_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSequenceTypeRef
entryRuleSequenceTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceTypeRefRule()); }
	 iv_ruleSequenceTypeRef=ruleSequenceTypeRef 
	 { $current=$iv_ruleSequenceTypeRef.current; } 
	 EOF 
;

// Rule SequenceTypeRef
ruleSequenceTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSequenceTypeRefAccess().getSequenceTypeRefAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceTypeRefAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceTypeRefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceTypeRefAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTupleTypeRef
entryRuleTupleTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleTypeRefRule()); }
	 iv_ruleTupleTypeRef=ruleTupleTypeRef 
	 { $current=$iv_ruleTupleTypeRef.current; } 
	 EOF 
;

// Rule TupleTypeRef
ruleTupleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTupleTypeRefAccess().getTupleTypeRefAction_0(),
            $current);
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleTypeRefAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_0_0()); 
	    }
		lv_items_2_0=ruleTupleTypeRefItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeRefRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_2_0, 
        		"TupleTypeRefItem");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTupleTypeRefAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeRefAccess().getItemsTupleTypeRefItemParserRuleCall_2_1_1_0()); 
	    }
		lv_items_4_0=ruleTupleTypeRefItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeRefRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_4_0, 
        		"TupleTypeRefItem");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTupleTypeRefAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleTupleTypeRefItem
entryRuleTupleTypeRefItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTupleTypeRefItemRule()); }
	 iv_ruleTupleTypeRefItem=ruleTupleTypeRefItem 
	 { $current=$iv_ruleTupleTypeRefItem.current; } 
	 EOF 
;

// Rule TupleTypeRefItem
ruleTupleTypeRefItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTupleTypeRefItemAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTupleTypeRefItemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTupleTypeRefItemAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTupleTypeRefItemAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTupleTypeRefItemRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSetTypeRef
entryRuleSetTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetTypeRefRule()); }
	 iv_ruleSetTypeRef=ruleSetTypeRef 
	 { $current=$iv_ruleSetTypeRef.current; } 
	 EOF 
;

// Rule SetTypeRef
ruleSetTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSetTypeRefAccess().getSetTypeRefAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSetTypeRefAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetTypeRefAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetTypeRefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSetTypeRefAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleVoidTypeRef
entryRuleVoidTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVoidTypeRefRule()); }
	 iv_ruleVoidTypeRef=ruleVoidTypeRef 
	 { $current=$iv_ruleVoidTypeRef.current; } 
	 EOF 
;

// Rule VoidTypeRef
ruleVoidTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=	'void' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getVoidTypeRefAccess().getNameVoidKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVoidTypeRefRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "void");
	    }

)
)
;





// Entry rule entryRuleAutoTypeRef
entryRuleAutoTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAutoTypeRefRule()); }
	 iv_ruleAutoTypeRef=ruleAutoTypeRef 
	 { $current=$iv_ruleAutoTypeRef.current; } 
	 EOF 
;

// Rule AutoTypeRef
ruleAutoTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAutoTypeRefAccess().getAutoTypeRefAction_0(),
            $current);
    }
)	otherlv_1='auto' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAutoTypeRefAccess().getAutoKeyword_1());
    }
)
;





// Entry rule entryRuleCollectionRef
entryRuleCollectionRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCollectionRefRule()); }
	 iv_ruleCollectionRef=ruleCollectionRef 
	 { $current=$iv_ruleCollectionRef.current; } 
	 EOF 
;

// Rule CollectionRef
ruleCollectionRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionRefAccess().getCollectionCollectionTypeEnumRuleCall_0_0()); 
	    }
		lv_collection_0_0=ruleCollectionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionRefRule());
	        }
       		set(
       			$current, 
       			"collection",
        		lv_collection_0_0, 
        		"CollectionType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCollectionRefAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCollectionRefAccess().getTyperefTypeRefParserRuleCall_2_0()); 
	    }
		lv_typeref_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCollectionRefRule());
	        }
       		set(
       			$current, 
       			"typeref",
        		lv_typeref_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCollectionRefAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleUnitRef
entryRuleUnitRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRefRule()); }
	 iv_ruleUnitRef=ruleUnitRef 
	 { $current=$iv_ruleUnitRef.current; } 
	 EOF 
;

// Rule UnitRef
ruleUnitRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnitRefAccess().getInKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUnitRefAccess().getUnittypeUnitCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleBoxRef
entryRuleBoxRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoxRefRule()); }
	 iv_ruleBoxRef=ruleBoxRef 
	 { $current=$iv_ruleBoxRef.current; } 
	 EOF 
;

// Rule BoxRef
ruleBoxRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='->' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBoxRefAccess().getHyphenMinusGreaterThanSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBoxRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getBoxRefAccess().getRefBoxCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleTypeAliasRef
entryRuleTypeAliasRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAliasRefRule()); }
	 iv_ruleTypeAliasRef=ruleTypeAliasRef 
	 { $current=$iv_ruleTypeAliasRef.current; } 
	 EOF 
;

// Rule TypeAliasRef
ruleTypeAliasRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeAliasRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTypeAliasRefAccess().getRefTypeAliasCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleAuxTypeRef
entryRuleAuxTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAuxTypeRefRule()); }
	 iv_ruleAuxTypeRef=ruleAuxTypeRef 
	 { $current=$iv_ruleAuxTypeRef.current; } 
	 EOF 
;

// Rule AuxTypeRef
ruleAuxTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxTypeRefAccess().getRefAuxTypeEnumRuleCall_0()); 
	    }
		lv_ref_0_0=ruleAuxType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxTypeRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"AuxType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleShapeRef
entryRuleShapeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getShapeRefRule()); }
	 iv_ruleShapeRef=ruleShapeRef 
	 { $current=$iv_ruleShapeRef.current; } 
	 EOF 
;

// Rule ShapeRef
ruleShapeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='~>' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getShapeRefAccess().getTildeGreaterThanSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getShapeRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getShapeRefAccess().getRefShapeCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleNumberTypeRef
entryRuleNumberTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberTypeRefRule()); }
	 iv_ruleNumberTypeRef=ruleNumberTypeRef 
	 { $current=$iv_ruleNumberTypeRef.current; } 
	 EOF 
;

// Rule NumberTypeRef
ruleNumberTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberTypeRefAccess().getRefNumberTypeEnumRuleCall_0()); 
	    }
		lv_ref_0_0=ruleNumberType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberTypeRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"NumberType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVisualTypeRef
entryRuleVisualTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisualTypeRefRule()); }
	 iv_ruleVisualTypeRef=ruleVisualTypeRef 
	 { $current=$iv_ruleVisualTypeRef.current; } 
	 EOF 
;

// Rule VisualTypeRef
ruleVisualTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualTypeRefAccess().getRefVisualTypeEnumRuleCall_0()); 
	    }
		lv_ref_0_0=ruleVisualType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualTypeRefRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"VisualType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTypeAlias
entryRuleTypeAlias returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeAliasRule()); }
	 iv_ruleTypeAlias=ruleTypeAlias 
	 { $current=$iv_ruleTypeAlias.current; } 
	 EOF 
;

// Rule TypeAlias
ruleTypeAlias returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='alias' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeAliasAccess().getAliasKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeAliasAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeAliasRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAliasAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeAliasRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStream
entryRuleStream returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStreamRule()); }
	 iv_ruleStream=ruleStream 
	 { $current=$iv_ruleStream.current; } 
	 EOF 
;

// Rule Stream
ruleStream returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=	'stream' 
    {
        newLeafNode(lv_name_0_0, grammarAccess.getStreamAccess().getNameStreamKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStreamRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_0, "stream");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStreamAccess().getLeftLStreamValueParserRuleCall_1_0()); 
	    }
		lv_left_1_0=ruleLStreamValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStreamRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_1_0, 
        		"LStreamValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='<-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStreamAccess().getLessThanSignHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStreamAccess().getRightRStreamValueParserRuleCall_3_0()); 
	    }
		lv_right_3_0=ruleRStreamValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStreamRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RStreamValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLStreamValue
entryRuleLStreamValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLStreamValueRule()); }
	 iv_ruleLStreamValue=ruleLStreamValue 
	 { $current=$iv_ruleLStreamValue.current; } 
	 EOF 
;

// Rule LStreamValue
ruleLStreamValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLStreamValueAccess().getOutputRefParserRuleCall()); 
    }
    this_OutputRef_0=ruleOutputRef
    { 
        $current = $this_OutputRef_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleRStreamValue
entryRuleRStreamValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRStreamValueRule()); }
	 iv_ruleRStreamValue=ruleRStreamValue 
	 { $current=$iv_ruleRStreamValue.current; } 
	 EOF 
;

// Rule RStreamValue
ruleRStreamValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRStreamValueAccess().getInputRefParserRuleCall_0()); 
    }
    this_InputRef_0=ruleInputRef
    { 
        $current = $this_InputRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getRStreamValueAccess().getLiteralExpressionParserRuleCall_1()); 
    }
    this_LiteralExpression_1=ruleLiteralExpression
    { 
        $current = $this_LiteralExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInputRef
entryRuleInputRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputRefRule()); }
	 iv_ruleInputRef=ruleInputRef 
	 { $current=$iv_ruleInputRef.current; } 
	 EOF 
;

// Rule InputRef
ruleInputRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInputRefAccess().getInputRefAction_0(),
            $current);
    }
)	otherlv_1='I' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputRefAccess().getIKeyword_1());
    }
)
;





// Entry rule entryRuleOutputRef
entryRuleOutputRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputRefRule()); }
	 iv_ruleOutputRef=ruleOutputRef 
	 { $current=$iv_ruleOutputRef.current; } 
	 EOF 
;

// Rule OutputRef
ruleOutputRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOutputRefAccess().getOutputRefAction_0(),
            $current);
    }
)	otherlv_1='O' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputRefAccess().getOKeyword_1());
    }
)
;





// Entry rule entryRuleInvokation
entryRuleInvokation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvokationRule()); }
	 iv_ruleInvokation=ruleInvokation 
	 { $current=$iv_ruleInvokation.current; } 
	 EOF 
;

// Rule Invokation
ruleInvokation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_module_0_0=RULE_ID
		{
			newLeafNode(lv_module_0_0, grammarAccess.getInvokationAccess().getModuleIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInvokationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"module",
        		lv_module_0_0, 
        		"ID");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInvokationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInvokationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInvokationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokationAccess().getSentencesInvokationParamParserRuleCall_3_0()); 
	    }
		lv_sentences_3_0=ruleInvokationParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokationRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_3_0, 
        		"InvokationParam");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInvokationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleInvokationParam
entryRuleInvokationParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvokationParamRule()); }
	 iv_ruleInvokationParam=ruleInvokationParam 
	 { $current=$iv_ruleInvokationParam.current; } 
	 EOF 
;

// Rule InvokationParam
ruleInvokationParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInvokationParamAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInvokationParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInvokationParamAccess().getLessThanSignHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInvokationParamAccess().getSourceLiteralExpressionParserRuleCall_2_0()); 
	    }
		lv_source_2_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInvokationParamRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_2_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLoop
entryRuleLoop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopRule()); }
	 iv_ruleLoop=ruleLoop 
	 { $current=$iv_ruleLoop.current; } 
	 EOF 
;

// Rule Loop
ruleLoop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='loop' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopAccess().getLoopKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getItLoopForParserRuleCall_1_0()); 
	    }
		lv_it_1_0=ruleLoopFor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		set(
       			$current, 
       			"it",
        		lv_it_1_0, 
        		"LoopFor");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLoopAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopAccess().getSentencesLoopSentenceParserRuleCall_4_0()); 
	    }
		lv_sentences_4_0=ruleLoopSentence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopRule());
	        }
       		add(
       			$current, 
       			"sentences",
        		lv_sentences_4_0, 
        		"LoopSentence");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleLoopSentence
entryRuleLoopSentence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopSentenceRule()); }
	 iv_ruleLoopSentence=ruleLoopSentence 
	 { $current=$iv_ruleLoopSentence.current; } 
	 EOF 
;

// Rule LoopSentence
ruleLoopSentence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getLoopSentenceAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLoopSentenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopSentenceAccess().getTypeTypeRefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopSentenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='<-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopSentenceAccess().getOLiteralExpressionParserRuleCall_3_0()); 
	    }
		lv_o_3_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopSentenceRule());
	        }
       		set(
       			$current, 
       			"o",
        		lv_o_3_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='<-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLoopSentenceAccess().getLessThanSignHyphenMinusKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLoopSentenceAccess().getILiteralExpressionParserRuleCall_4_1_0()); 
	    }
		lv_i_5_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLoopSentenceRule());
	        }
       		set(
       			$current, 
       			"i",
        		lv_i_5_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLoopFor
entryRuleLoopFor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLoopForRule()); }
	 iv_ruleLoopFor=ruleLoopFor 
	 { $current=$iv_ruleLoopFor.current; } 
	 EOF 
;

// Rule LoopFor
ruleLoopFor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLoopForAccess().getForKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getLoopForAccess().getSequenceLiteralParserRuleCall_1()); 
    }
    this_SequenceLiteral_1=ruleSequenceLiteral
    { 
        $current = $this_SequenceLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFactory
entryRuleFactory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFactoryRule()); }
	 iv_ruleFactory=ruleFactory 
	 { $current=$iv_ruleFactory.current; } 
	 EOF 
;

// Rule Factory
ruleFactory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='factory' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFactoryAccess().getFactoryKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFactoryAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFactoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactoryAccess().getTypeTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactoryRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='file' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFileAccess().getFileKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFileAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		lv_isinput_2_0=	'<-' 
    {
        newLeafNode(lv_isinput_2_0, grammarAccess.getFileAccess().getIsinputLessThanSignHyphenMinusKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed($current, "isinput", true, "<-");
	    }

)
)
    |	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFileAccess().getHyphenMinusGreaterThanSignKeyword_2_1());
    }
)(
(
		lv_path_4_0=RULE_STRING
		{
			newLeafNode(lv_path_4_0, grammarAccess.getFileAccess().getPathSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleCanvas
entryRuleCanvas returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCanvasRule()); }
	 iv_ruleCanvas=ruleCanvas 
	 { $current=$iv_ruleCanvas.current; } 
	 EOF 
;

// Rule Canvas
ruleCanvas returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='canvas' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCanvasAccess().getCanvasKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCanvasAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCanvasRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCanvasAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getCanvasAccess().getPropertiesPairParserRuleCall_3_0_0()); 
	    }
		lv_properties_3_0=rulePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCanvasRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"Pair");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCanvasAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCanvasAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Rule BinOp
ruleBinOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getBinOpAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinOpAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='||' 
	{
        $current = grammarAccess.getBinOpAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinOpAccess().getOrEnumLiteralDeclaration_1()); 
    }
));



// Rule NegationOp
ruleNegationOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='!' 
	{
        $current = grammarAccess.getNegationOpAccess().getNegEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNegationOpAccess().getNegEnumLiteralDeclaration()); 
    }
);



// Rule CompOp
ruleCompOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getCompOpAccess().getEqEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCompOpAccess().getEqEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getCompOpAccess().getNeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCompOpAccess().getNeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='<' 
	{
        $current = grammarAccess.getCompOpAccess().getLtEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCompOpAccess().getLtEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getCompOpAccess().getGtEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCompOpAccess().getGtEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='<=' 
	{
        $current = grammarAccess.getCompOpAccess().getLeEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCompOpAccess().getLeEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='>=' 
	{
        $current = grammarAccess.getCompOpAccess().getGeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getCompOpAccess().getGeEnumLiteralDeclaration_5()); 
    }
));



// Rule AddOp
ruleAddOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getAddOpAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAddOpAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getAddOpAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAddOpAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule MultiOp
ruleMultiOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMultiOpAccess().getTimesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiOpAccess().getTimesEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='%' 
	{
        $current = grammarAccess.getMultiOpAccess().getModuloEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiOpAccess().getModuloEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='//' 
	{
        $current = grammarAccess.getMultiOpAccess().getIntdivisionEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiOpAccess().getIntdivisionEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='/' 
	{
        $current = grammarAccess.getMultiOpAccess().getDividebyEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMultiOpAccess().getDividebyEnumLiteralDeclaration_3()); 
    }
));



// Rule ExpOp
ruleExpOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='**' 
	{
        $current = grammarAccess.getExpOpAccess().getExpEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getExpOpAccess().getExpEnumLiteralDeclaration()); 
    }
);



// Rule NumberType
ruleNumberType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='positive' 
	{
        $current = grammarAccess.getNumberTypeAccess().getPositiveEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNumberTypeAccess().getPositiveEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='natural' 
	{
        $current = grammarAccess.getNumberTypeAccess().getNaturalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNumberTypeAccess().getNaturalEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='integer' 
	{
        $current = grammarAccess.getNumberTypeAccess().getIntegerEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNumberTypeAccess().getIntegerEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='rational' 
	{
        $current = grammarAccess.getNumberTypeAccess().getRationalEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getNumberTypeAccess().getRationalEnumLiteralDeclaration_3()); 
    }
));



// Rule VisualType
ruleVisualType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='shape' 
	{
        $current = grammarAccess.getVisualTypeAccess().getShapeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getVisualTypeAccess().getShapeEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='color' 
	{
        $current = grammarAccess.getVisualTypeAccess().getColorEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getVisualTypeAccess().getColorEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='angle' 
	{
        $current = grammarAccess.getVisualTypeAccess().getAngleEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getVisualTypeAccess().getAngleEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='size' 
	{
        $current = grammarAccess.getVisualTypeAccess().getSizeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getVisualTypeAccess().getSizeEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='position' 
	{
        $current = grammarAccess.getVisualTypeAccess().getPositionEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getVisualTypeAccess().getPositionEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='texture' 
	{
        $current = grammarAccess.getVisualTypeAccess().getTextureEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getVisualTypeAccess().getTextureEnumLiteralDeclaration_5()); 
    }
));



// Rule AuxType
ruleAuxType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='string' 
	{
        $current = grammarAccess.getAuxTypeAccess().getStringEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAuxTypeAccess().getStringEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bool' 
	{
        $current = grammarAccess.getAuxTypeAccess().getBoolEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAuxTypeAccess().getBoolEnumLiteralDeclaration_1()); 
    }
));



// Rule CollectionType
ruleCollectionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='set' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCollectionTypeAccess().getSetEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='bag' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCollectionTypeAccess().getBagEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='list' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getListEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getCollectionTypeAccess().getListEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='graph' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getGraphEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getCollectionTypeAccess().getGraphEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='single' 
	{
        $current = grammarAccess.getCollectionTypeAccess().getSingleEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getCollectionTypeAccess().getSingleEnumLiteralDeclaration_4()); 
    }
));



RULE_OCT : ('0'..'7')+ 'o';

RULE_HEX : '0x' ('0'..'9'|'A'..'F'|'a'..'f')+;

RULE_BIN : ('0'..'1')+ 'b';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


